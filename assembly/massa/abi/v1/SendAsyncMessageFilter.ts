// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { BytesValue } from "../../../google/protobuf/BytesValue";

export class SendAsyncMessageFilter {
  static encode(message: SendAsyncMessageFilter, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.targetAddress);

    const targetKey = message.targetKey;
    if (targetKey !== null) {
      writer.uint32(18);
      writer.fork();
      BytesValue.encode(targetKey, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SendAsyncMessageFilter {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SendAsyncMessageFilter();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.targetAddress = reader.string();
          break;

        case 2:
          message.targetKey = BytesValue.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  targetAddress: string;
  targetKey: BytesValue | null;

  constructor(targetAddress: string = "", targetKey: BytesValue | null = null) {
    this.targetAddress = targetAddress;
    this.targetKey = targetKey;
  }
}

export function encodeSendAsyncMessageFilter(
  message: SendAsyncMessageFilter
): Uint8Array {
  return Protobuf.encode(message, SendAsyncMessageFilter.encode);
}

export function decodeSendAsyncMessageFilter(
  buffer: Uint8Array
): SendAsyncMessageFilter {
  return Protobuf.decode<SendAsyncMessageFilter>(
    buffer,
    SendAsyncMessageFilter.decode
  );
}
