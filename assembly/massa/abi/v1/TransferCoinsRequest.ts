// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Address } from "./Address";
import { Amount } from "./Amount";

export class TransferCoinsRequest {
  static encode(message: TransferCoinsRequest, writer: Writer): void {
    const toAddress = message.toAddress;
    if (toAddress !== null) {
      writer.uint32(10);
      writer.fork();
      Address.encode(toAddress, writer);
      writer.ldelim();
    }

    const rawAmount = message.rawAmount;
    if (rawAmount !== null) {
      writer.uint32(18);
      writer.fork();
      Amount.encode(rawAmount, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): TransferCoinsRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TransferCoinsRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.toAddress = Address.decode(reader, reader.uint32());
          break;

        case 2:
          message.rawAmount = Amount.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  toAddress: Address | null;
  rawAmount: Amount | null;

  constructor(
    toAddress: Address | null = null,
    rawAmount: Amount | null = null
  ) {
    this.toAddress = toAddress;
    this.rawAmount = rawAmount;
  }
}

export function encodeTransferCoinsRequest(
  message: TransferCoinsRequest
): Uint8Array {
  return Protobuf.encode(message, TransferCoinsRequest.encode);
}

export function decodeTransferCoinsRequest(
  buffer: Uint8Array
): TransferCoinsRequest {
  return Protobuf.decode<TransferCoinsRequest>(
    buffer,
    TransferCoinsRequest.decode
  );
}
