// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.3

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { AddNativeAmountResult } from "./AddNativeAmountResult";
import { AddressFromPubKeyResult } from "./AddressFromPubKeyResult";
import { AppendDsValueResult } from "./AppendDsValueResult";
import { Base58CheckToBytesResult } from "./Base58CheckToBytesResult";
import { BytesToBase58CheckResult } from "./BytesToBase58CheckResult";
import { CallerHasWriteAccessResult } from "./CallerHasWriteAccessResult";
import { CheckAddressResult } from "./CheckAddressResult";
import { CheckNativeAmountResult } from "./CheckNativeAmountResult";
import { CheckPubKeyResult } from "./CheckPubKeyResult";
import { CheckSigResult } from "./CheckSigResult";
import { CheckedAddNativeTimeResult } from "./CheckedAddNativeTimeResult";
import { CheckedDivRemNativeTimeResult } from "./CheckedDivRemNativeTimeResult";
import { CheckedScalarDivRemNativeTimeResult } from "./CheckedScalarDivRemNativeTimeResult";
import { CheckedScalarMulNativeTimeResult } from "./CheckedScalarMulNativeTimeResult";
import { CheckedSubNativeTimeResult } from "./CheckedSubNativeTimeResult";
import { CompareAddressResult } from "./CompareAddressResult";
import { CompareNativeAmountResult } from "./CompareNativeAmountResult";
import { CompareNativeTimeResult } from "./CompareNativeTimeResult";
import { ComparePubKeyResult } from "./ComparePubKeyResult";
import { CreateScResult } from "./CreateScResult";
import { DeleteDsEntryResult } from "./DeleteDsEntryResult";
import { DivRemNativeAmountResult } from "./DivRemNativeAmountResult";
import { DsEntryExistsResult } from "./DsEntryExistsResult";
import { FunctionExistsResult } from "./FunctionExistsResult";
import { GenerateEventResult } from "./GenerateEventResult";
import { GetAddressCategoryResult } from "./GetAddressCategoryResult";
import { GetAddressVersionResult } from "./GetAddressVersionResult";
import { GetBalanceResult } from "./GetBalanceResult";
import { GetBytecodeResult } from "./GetBytecodeResult";
import { GetCallCoinsResult } from "./GetCallCoinsResult";
import { GetCallStackResult } from "./GetCallStackResult";
import { GetCurrentSlotResult } from "./GetCurrentSlotResult";
import { GetDsKeysResult } from "./GetDsKeysResult";
import { GetDsValueResult } from "./GetDsValueResult";
import { GetNativeTimeResult } from "./GetNativeTimeResult";
import { GetOpDataResult } from "./GetOpDataResult";
import { GetOpKeysResult } from "./GetOpKeysResult";
import { GetOriginOperationIdResult } from "./GetOriginOperationIdResult";
import { GetOwnedAddressesResult } from "./GetOwnedAddressesResult";
import { GetPubKeyVersionResult } from "./GetPubKeyVersionResult";
import { GetRemainingGasResult } from "./GetRemainingGasResult";
import { GetSignatureVersionResult } from "./GetSignatureVersionResult";
import { HashBlake3Result } from "./HashBlake3Result";
import { HashSha256Result } from "./HashSha256Result";
import { OpEntryExistsResult } from "./OpEntryExistsResult";
import { Keccak256Result } from "./Keccak256Result";
import { LocalExecutionResponse } from "./LocalExecutionResponse";
import { NativeAmountFromStringResult } from "./NativeAmountFromStringResult";
import { NativeAmountToStringResult } from "./NativeAmountToStringResult";
import { ScalarDivRemNativeAmountResult } from "./ScalarDivRemNativeAmountResult";
import { ScalarMulNativeAmountResult } from "./ScalarMulNativeAmountResult";
import { SendAsyncMessageResult } from "./SendAsyncMessageResult";
import { SetBytecodeResult } from "./SetBytecodeResult";
import { SetDsValueResult } from "./SetDsValueResult";
import { SubNativeAmountResult } from "./SubNativeAmountResult";
import { TransferCoinsResult } from "./TransferCoinsResult";
import { UnsafeRandomResult } from "./UnsafeRandomResult";
import { EvmVerifySigResult } from "./EvmVerifySigResult";
import { VerifySigResult } from "./VerifySigResult";
import { EvmGetAddressFromPubkeyResult } from "./EvmGetAddressFromPubkeyResult";
import { EvmGetPubkeyFromSignatureResult } from "./EvmGetPubkeyFromSignatureResult";
import { IsAddressEoaResult } from "./IsAddressEoaResult";

export class RespResult {
  static encode(message: RespResult, writer: Writer): void {
    const addNativeAmountResult = message.addNativeAmountResult;
    if (addNativeAmountResult !== null) {
      writer.uint32(10);
      writer.fork();
      AddNativeAmountResult.encode(addNativeAmountResult, writer);
      writer.ldelim();
    }

    const addressFromPubKeyResult = message.addressFromPubKeyResult;
    if (addressFromPubKeyResult !== null) {
      writer.uint32(18);
      writer.fork();
      AddressFromPubKeyResult.encode(addressFromPubKeyResult, writer);
      writer.ldelim();
    }

    const appendDsValueResult = message.appendDsValueResult;
    if (appendDsValueResult !== null) {
      writer.uint32(26);
      writer.fork();
      AppendDsValueResult.encode(appendDsValueResult, writer);
      writer.ldelim();
    }

    const base58CheckToBytesResult = message.base58CheckToBytesResult;
    if (base58CheckToBytesResult !== null) {
      writer.uint32(34);
      writer.fork();
      Base58CheckToBytesResult.encode(base58CheckToBytesResult, writer);
      writer.ldelim();
    }

    const bytesToBase58CheckResult = message.bytesToBase58CheckResult;
    if (bytesToBase58CheckResult !== null) {
      writer.uint32(42);
      writer.fork();
      BytesToBase58CheckResult.encode(bytesToBase58CheckResult, writer);
      writer.ldelim();
    }

    const callerHasWriteAccessResult = message.callerHasWriteAccessResult;
    if (callerHasWriteAccessResult !== null) {
      writer.uint32(50);
      writer.fork();
      CallerHasWriteAccessResult.encode(callerHasWriteAccessResult, writer);
      writer.ldelim();
    }

    const checkAddressResult = message.checkAddressResult;
    if (checkAddressResult !== null) {
      writer.uint32(58);
      writer.fork();
      CheckAddressResult.encode(checkAddressResult, writer);
      writer.ldelim();
    }

    const checkNativeAmountResult = message.checkNativeAmountResult;
    if (checkNativeAmountResult !== null) {
      writer.uint32(66);
      writer.fork();
      CheckNativeAmountResult.encode(checkNativeAmountResult, writer);
      writer.ldelim();
    }

    const checkPubKeyResult = message.checkPubKeyResult;
    if (checkPubKeyResult !== null) {
      writer.uint32(74);
      writer.fork();
      CheckPubKeyResult.encode(checkPubKeyResult, writer);
      writer.ldelim();
    }

    const checkSigResult = message.checkSigResult;
    if (checkSigResult !== null) {
      writer.uint32(82);
      writer.fork();
      CheckSigResult.encode(checkSigResult, writer);
      writer.ldelim();
    }

    const checkedAddNativeTimeResult = message.checkedAddNativeTimeResult;
    if (checkedAddNativeTimeResult !== null) {
      writer.uint32(90);
      writer.fork();
      CheckedAddNativeTimeResult.encode(checkedAddNativeTimeResult, writer);
      writer.ldelim();
    }

    const checkedDivRemNativeTimeResult = message.checkedDivRemNativeTimeResult;
    if (checkedDivRemNativeTimeResult !== null) {
      writer.uint32(98);
      writer.fork();
      CheckedDivRemNativeTimeResult.encode(
        checkedDivRemNativeTimeResult,
        writer
      );
      writer.ldelim();
    }

    const checkedScalarDivRemNativeTimeResult =
      message.checkedScalarDivRemNativeTimeResult;
    if (checkedScalarDivRemNativeTimeResult !== null) {
      writer.uint32(106);
      writer.fork();
      CheckedScalarDivRemNativeTimeResult.encode(
        checkedScalarDivRemNativeTimeResult,
        writer
      );
      writer.ldelim();
    }

    const checkedScalarMulNativeTimeResult =
      message.checkedScalarMulNativeTimeResult;
    if (checkedScalarMulNativeTimeResult !== null) {
      writer.uint32(114);
      writer.fork();
      CheckedScalarMulNativeTimeResult.encode(
        checkedScalarMulNativeTimeResult,
        writer
      );
      writer.ldelim();
    }

    const checkedSubNativeTimeResult = message.checkedSubNativeTimeResult;
    if (checkedSubNativeTimeResult !== null) {
      writer.uint32(122);
      writer.fork();
      CheckedSubNativeTimeResult.encode(checkedSubNativeTimeResult, writer);
      writer.ldelim();
    }

    const compareAddressResult = message.compareAddressResult;
    if (compareAddressResult !== null) {
      writer.uint32(130);
      writer.fork();
      CompareAddressResult.encode(compareAddressResult, writer);
      writer.ldelim();
    }

    const compareNativeAmountResult = message.compareNativeAmountResult;
    if (compareNativeAmountResult !== null) {
      writer.uint32(138);
      writer.fork();
      CompareNativeAmountResult.encode(compareNativeAmountResult, writer);
      writer.ldelim();
    }

    const compareNativeTimeResult = message.compareNativeTimeResult;
    if (compareNativeTimeResult !== null) {
      writer.uint32(146);
      writer.fork();
      CompareNativeTimeResult.encode(compareNativeTimeResult, writer);
      writer.ldelim();
    }

    const comparePubKeyResult = message.comparePubKeyResult;
    if (comparePubKeyResult !== null) {
      writer.uint32(154);
      writer.fork();
      ComparePubKeyResult.encode(comparePubKeyResult, writer);
      writer.ldelim();
    }

    const createScResult = message.createScResult;
    if (createScResult !== null) {
      writer.uint32(162);
      writer.fork();
      CreateScResult.encode(createScResult, writer);
      writer.ldelim();
    }

    const deleteDsEntryResult = message.deleteDsEntryResult;
    if (deleteDsEntryResult !== null) {
      writer.uint32(170);
      writer.fork();
      DeleteDsEntryResult.encode(deleteDsEntryResult, writer);
      writer.ldelim();
    }

    const divRemNativeAmountResult = message.divRemNativeAmountResult;
    if (divRemNativeAmountResult !== null) {
      writer.uint32(178);
      writer.fork();
      DivRemNativeAmountResult.encode(divRemNativeAmountResult, writer);
      writer.ldelim();
    }

    const dsEntryExistsResult = message.dsEntryExistsResult;
    if (dsEntryExistsResult !== null) {
      writer.uint32(186);
      writer.fork();
      DsEntryExistsResult.encode(dsEntryExistsResult, writer);
      writer.ldelim();
    }

    const functionExistsResult = message.functionExistsResult;
    if (functionExistsResult !== null) {
      writer.uint32(194);
      writer.fork();
      FunctionExistsResult.encode(functionExistsResult, writer);
      writer.ldelim();
    }

    const generateEventResult = message.generateEventResult;
    if (generateEventResult !== null) {
      writer.uint32(202);
      writer.fork();
      GenerateEventResult.encode(generateEventResult, writer);
      writer.ldelim();
    }

    const getAddressCategoryResult = message.getAddressCategoryResult;
    if (getAddressCategoryResult !== null) {
      writer.uint32(210);
      writer.fork();
      GetAddressCategoryResult.encode(getAddressCategoryResult, writer);
      writer.ldelim();
    }

    const getAddressVersionResult = message.getAddressVersionResult;
    if (getAddressVersionResult !== null) {
      writer.uint32(218);
      writer.fork();
      GetAddressVersionResult.encode(getAddressVersionResult, writer);
      writer.ldelim();
    }

    const getBalanceResult = message.getBalanceResult;
    if (getBalanceResult !== null) {
      writer.uint32(226);
      writer.fork();
      GetBalanceResult.encode(getBalanceResult, writer);
      writer.ldelim();
    }

    const getBytecodeResult = message.getBytecodeResult;
    if (getBytecodeResult !== null) {
      writer.uint32(234);
      writer.fork();
      GetBytecodeResult.encode(getBytecodeResult, writer);
      writer.ldelim();
    }

    const getCallCoinsResult = message.getCallCoinsResult;
    if (getCallCoinsResult !== null) {
      writer.uint32(242);
      writer.fork();
      GetCallCoinsResult.encode(getCallCoinsResult, writer);
      writer.ldelim();
    }

    const getCallStackResult = message.getCallStackResult;
    if (getCallStackResult !== null) {
      writer.uint32(250);
      writer.fork();
      GetCallStackResult.encode(getCallStackResult, writer);
      writer.ldelim();
    }

    const getCurrentSlotResult = message.getCurrentSlotResult;
    if (getCurrentSlotResult !== null) {
      writer.uint32(258);
      writer.fork();
      GetCurrentSlotResult.encode(getCurrentSlotResult, writer);
      writer.ldelim();
    }

    const getDsKeysResult = message.getDsKeysResult;
    if (getDsKeysResult !== null) {
      writer.uint32(266);
      writer.fork();
      GetDsKeysResult.encode(getDsKeysResult, writer);
      writer.ldelim();
    }

    const getDsValueResult = message.getDsValueResult;
    if (getDsValueResult !== null) {
      writer.uint32(274);
      writer.fork();
      GetDsValueResult.encode(getDsValueResult, writer);
      writer.ldelim();
    }

    const getNativeTimeResult = message.getNativeTimeResult;
    if (getNativeTimeResult !== null) {
      writer.uint32(282);
      writer.fork();
      GetNativeTimeResult.encode(getNativeTimeResult, writer);
      writer.ldelim();
    }

    const getOpDataResult = message.getOpDataResult;
    if (getOpDataResult !== null) {
      writer.uint32(290);
      writer.fork();
      GetOpDataResult.encode(getOpDataResult, writer);
      writer.ldelim();
    }

    const getOpKeysResult = message.getOpKeysResult;
    if (getOpKeysResult !== null) {
      writer.uint32(298);
      writer.fork();
      GetOpKeysResult.encode(getOpKeysResult, writer);
      writer.ldelim();
    }

    const getOriginOperationIdResult = message.getOriginOperationIdResult;
    if (getOriginOperationIdResult !== null) {
      writer.uint32(306);
      writer.fork();
      GetOriginOperationIdResult.encode(getOriginOperationIdResult, writer);
      writer.ldelim();
    }

    const getOwnedAddressesResult = message.getOwnedAddressesResult;
    if (getOwnedAddressesResult !== null) {
      writer.uint32(314);
      writer.fork();
      GetOwnedAddressesResult.encode(getOwnedAddressesResult, writer);
      writer.ldelim();
    }

    const getPubKeyVersionResult = message.getPubKeyVersionResult;
    if (getPubKeyVersionResult !== null) {
      writer.uint32(322);
      writer.fork();
      GetPubKeyVersionResult.encode(getPubKeyVersionResult, writer);
      writer.ldelim();
    }

    const getRemainingGasResult = message.getRemainingGasResult;
    if (getRemainingGasResult !== null) {
      writer.uint32(330);
      writer.fork();
      GetRemainingGasResult.encode(getRemainingGasResult, writer);
      writer.ldelim();
    }

    const getSignatureVersionResult = message.getSignatureVersionResult;
    if (getSignatureVersionResult !== null) {
      writer.uint32(338);
      writer.fork();
      GetSignatureVersionResult.encode(getSignatureVersionResult, writer);
      writer.ldelim();
    }

    const hashBlake3Result = message.hashBlake3Result;
    if (hashBlake3Result !== null) {
      writer.uint32(346);
      writer.fork();
      HashBlake3Result.encode(hashBlake3Result, writer);
      writer.ldelim();
    }

    const hashSha256Result = message.hashSha256Result;
    if (hashSha256Result !== null) {
      writer.uint32(354);
      writer.fork();
      HashSha256Result.encode(hashSha256Result, writer);
      writer.ldelim();
    }

    const opEntryExistsResult = message.opEntryExistsResult;
    if (opEntryExistsResult !== null) {
      writer.uint32(362);
      writer.fork();
      OpEntryExistsResult.encode(opEntryExistsResult, writer);
      writer.ldelim();
    }

    const keccak256Result = message.keccak256Result;
    if (keccak256Result !== null) {
      writer.uint32(370);
      writer.fork();
      Keccak256Result.encode(keccak256Result, writer);
      writer.ldelim();
    }

    const localExecutionResponse = message.localExecutionResponse;
    if (localExecutionResponse !== null) {
      writer.uint32(378);
      writer.fork();
      LocalExecutionResponse.encode(localExecutionResponse, writer);
      writer.ldelim();
    }

    const nativeAmountFromStringResult = message.nativeAmountFromStringResult;
    if (nativeAmountFromStringResult !== null) {
      writer.uint32(386);
      writer.fork();
      NativeAmountFromStringResult.encode(nativeAmountFromStringResult, writer);
      writer.ldelim();
    }

    const nativeAmountToStringResult = message.nativeAmountToStringResult;
    if (nativeAmountToStringResult !== null) {
      writer.uint32(394);
      writer.fork();
      NativeAmountToStringResult.encode(nativeAmountToStringResult, writer);
      writer.ldelim();
    }

    const scalarDivRemNativeAmountResult =
      message.scalarDivRemNativeAmountResult;
    if (scalarDivRemNativeAmountResult !== null) {
      writer.uint32(402);
      writer.fork();
      ScalarDivRemNativeAmountResult.encode(
        scalarDivRemNativeAmountResult,
        writer
      );
      writer.ldelim();
    }

    const scalarMulNativeAmountResult = message.scalarMulNativeAmountResult;
    if (scalarMulNativeAmountResult !== null) {
      writer.uint32(410);
      writer.fork();
      ScalarMulNativeAmountResult.encode(scalarMulNativeAmountResult, writer);
      writer.ldelim();
    }

    const sendAsyncMessageResult = message.sendAsyncMessageResult;
    if (sendAsyncMessageResult !== null) {
      writer.uint32(418);
      writer.fork();
      SendAsyncMessageResult.encode(sendAsyncMessageResult, writer);
      writer.ldelim();
    }

    const setBytecodeResult = message.setBytecodeResult;
    if (setBytecodeResult !== null) {
      writer.uint32(426);
      writer.fork();
      SetBytecodeResult.encode(setBytecodeResult, writer);
      writer.ldelim();
    }

    const setDsValueResult = message.setDsValueResult;
    if (setDsValueResult !== null) {
      writer.uint32(434);
      writer.fork();
      SetDsValueResult.encode(setDsValueResult, writer);
      writer.ldelim();
    }

    const subNativeAmountResult = message.subNativeAmountResult;
    if (subNativeAmountResult !== null) {
      writer.uint32(442);
      writer.fork();
      SubNativeAmountResult.encode(subNativeAmountResult, writer);
      writer.ldelim();
    }

    const transferCoinsResult = message.transferCoinsResult;
    if (transferCoinsResult !== null) {
      writer.uint32(450);
      writer.fork();
      TransferCoinsResult.encode(transferCoinsResult, writer);
      writer.ldelim();
    }

    const unsafeRandomResult = message.unsafeRandomResult;
    if (unsafeRandomResult !== null) {
      writer.uint32(458);
      writer.fork();
      UnsafeRandomResult.encode(unsafeRandomResult, writer);
      writer.ldelim();
    }

    const evmVerifySigResult = message.evmVerifySigResult;
    if (evmVerifySigResult !== null) {
      writer.uint32(466);
      writer.fork();
      EvmVerifySigResult.encode(evmVerifySigResult, writer);
      writer.ldelim();
    }

    const verifySigResult = message.verifySigResult;
    if (verifySigResult !== null) {
      writer.uint32(474);
      writer.fork();
      VerifySigResult.encode(verifySigResult, writer);
      writer.ldelim();
    }

    const evmGetAddressFromPubkeyResult = message.evmGetAddressFromPubkeyResult;
    if (evmGetAddressFromPubkeyResult !== null) {
      writer.uint32(482);
      writer.fork();
      EvmGetAddressFromPubkeyResult.encode(
        evmGetAddressFromPubkeyResult,
        writer
      );
      writer.ldelim();
    }

    const evmGetPubkeyFromSignatureResult =
      message.evmGetPubkeyFromSignatureResult;
    if (evmGetPubkeyFromSignatureResult !== null) {
      writer.uint32(490);
      writer.fork();
      EvmGetPubkeyFromSignatureResult.encode(
        evmGetPubkeyFromSignatureResult,
        writer
      );
      writer.ldelim();
    }

    const isAddressEoaResult = message.isAddressEoaResult;
    if (isAddressEoaResult !== null) {
      writer.uint32(498);
      writer.fork();
      IsAddressEoaResult.encode(isAddressEoaResult, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): RespResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new RespResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.addNativeAmountResult = AddNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.addressFromPubKeyResult = AddressFromPubKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.appendDsValueResult = AppendDsValueResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.base58CheckToBytesResult = Base58CheckToBytesResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.bytesToBase58CheckResult = BytesToBase58CheckResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 6:
          message.callerHasWriteAccessResult =
            CallerHasWriteAccessResult.decode(reader, reader.uint32());
          break;

        case 7:
          message.checkAddressResult = CheckAddressResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 8:
          message.checkNativeAmountResult = CheckNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 9:
          message.checkPubKeyResult = CheckPubKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 10:
          message.checkSigResult = CheckSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 11:
          message.checkedAddNativeTimeResult =
            CheckedAddNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 12:
          message.checkedDivRemNativeTimeResult =
            CheckedDivRemNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 13:
          message.checkedScalarDivRemNativeTimeResult =
            CheckedScalarDivRemNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 14:
          message.checkedScalarMulNativeTimeResult =
            CheckedScalarMulNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 15:
          message.checkedSubNativeTimeResult =
            CheckedSubNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 16:
          message.compareAddressResult = CompareAddressResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 17:
          message.compareNativeAmountResult = CompareNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 18:
          message.compareNativeTimeResult = CompareNativeTimeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 19:
          message.comparePubKeyResult = ComparePubKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 20:
          message.createScResult = CreateScResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 21:
          message.deleteDsEntryResult = DeleteDsEntryResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 22:
          message.divRemNativeAmountResult = DivRemNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 23:
          message.dsEntryExistsResult = DsEntryExistsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 24:
          message.functionExistsResult = FunctionExistsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 25:
          message.generateEventResult = GenerateEventResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 26:
          message.getAddressCategoryResult = GetAddressCategoryResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 27:
          message.getAddressVersionResult = GetAddressVersionResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 28:
          message.getBalanceResult = GetBalanceResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 29:
          message.getBytecodeResult = GetBytecodeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 30:
          message.getCallCoinsResult = GetCallCoinsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 31:
          message.getCallStackResult = GetCallStackResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 32:
          message.getCurrentSlotResult = GetCurrentSlotResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 33:
          message.getDsKeysResult = GetDsKeysResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 34:
          message.getDsValueResult = GetDsValueResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 35:
          message.getNativeTimeResult = GetNativeTimeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 36:
          message.getOpDataResult = GetOpDataResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 37:
          message.getOpKeysResult = GetOpKeysResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 38:
          message.getOriginOperationIdResult =
            GetOriginOperationIdResult.decode(reader, reader.uint32());
          break;

        case 39:
          message.getOwnedAddressesResult = GetOwnedAddressesResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 40:
          message.getPubKeyVersionResult = GetPubKeyVersionResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 41:
          message.getRemainingGasResult = GetRemainingGasResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 42:
          message.getSignatureVersionResult = GetSignatureVersionResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 43:
          message.hashBlake3Result = HashBlake3Result.decode(
            reader,
            reader.uint32()
          );
          break;

        case 44:
          message.hashSha256Result = HashSha256Result.decode(
            reader,
            reader.uint32()
          );
          break;

        case 45:
          message.opEntryExistsResult = OpEntryExistsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 46:
          message.keccak256Result = Keccak256Result.decode(
            reader,
            reader.uint32()
          );
          break;

        case 47:
          message.localExecutionResponse = LocalExecutionResponse.decode(
            reader,
            reader.uint32()
          );
          break;

        case 48:
          message.nativeAmountFromStringResult =
            NativeAmountFromStringResult.decode(reader, reader.uint32());
          break;

        case 49:
          message.nativeAmountToStringResult =
            NativeAmountToStringResult.decode(reader, reader.uint32());
          break;

        case 50:
          message.scalarDivRemNativeAmountResult =
            ScalarDivRemNativeAmountResult.decode(reader, reader.uint32());
          break;

        case 51:
          message.scalarMulNativeAmountResult =
            ScalarMulNativeAmountResult.decode(reader, reader.uint32());
          break;

        case 52:
          message.sendAsyncMessageResult = SendAsyncMessageResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 53:
          message.setBytecodeResult = SetBytecodeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 54:
          message.setDsValueResult = SetDsValueResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 55:
          message.subNativeAmountResult = SubNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 56:
          message.transferCoinsResult = TransferCoinsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 57:
          message.unsafeRandomResult = UnsafeRandomResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 58:
          message.evmVerifySigResult = EvmVerifySigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 59:
          message.verifySigResult = VerifySigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 60:
          message.evmGetAddressFromPubkeyResult =
            EvmGetAddressFromPubkeyResult.decode(reader, reader.uint32());
          break;

        case 61:
          message.evmGetPubkeyFromSignatureResult =
            EvmGetPubkeyFromSignatureResult.decode(reader, reader.uint32());
          break;

        case 62:
          message.isAddressEoaResult = IsAddressEoaResult.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  addNativeAmountResult: AddNativeAmountResult | null;
  addressFromPubKeyResult: AddressFromPubKeyResult | null;
  appendDsValueResult: AppendDsValueResult | null;
  base58CheckToBytesResult: Base58CheckToBytesResult | null;
  bytesToBase58CheckResult: BytesToBase58CheckResult | null;
  callerHasWriteAccessResult: CallerHasWriteAccessResult | null;
  checkAddressResult: CheckAddressResult | null;
  checkNativeAmountResult: CheckNativeAmountResult | null;
  checkPubKeyResult: CheckPubKeyResult | null;
  checkSigResult: CheckSigResult | null;
  checkedAddNativeTimeResult: CheckedAddNativeTimeResult | null;
  checkedDivRemNativeTimeResult: CheckedDivRemNativeTimeResult | null;
  checkedScalarDivRemNativeTimeResult: CheckedScalarDivRemNativeTimeResult | null;
  checkedScalarMulNativeTimeResult: CheckedScalarMulNativeTimeResult | null;
  checkedSubNativeTimeResult: CheckedSubNativeTimeResult | null;
  compareAddressResult: CompareAddressResult | null;
  compareNativeAmountResult: CompareNativeAmountResult | null;
  compareNativeTimeResult: CompareNativeTimeResult | null;
  comparePubKeyResult: ComparePubKeyResult | null;
  createScResult: CreateScResult | null;
  deleteDsEntryResult: DeleteDsEntryResult | null;
  divRemNativeAmountResult: DivRemNativeAmountResult | null;
  dsEntryExistsResult: DsEntryExistsResult | null;
  functionExistsResult: FunctionExistsResult | null;
  generateEventResult: GenerateEventResult | null;
  getAddressCategoryResult: GetAddressCategoryResult | null;
  getAddressVersionResult: GetAddressVersionResult | null;
  getBalanceResult: GetBalanceResult | null;
  getBytecodeResult: GetBytecodeResult | null;
  getCallCoinsResult: GetCallCoinsResult | null;
  getCallStackResult: GetCallStackResult | null;
  getCurrentSlotResult: GetCurrentSlotResult | null;
  getDsKeysResult: GetDsKeysResult | null;
  getDsValueResult: GetDsValueResult | null;
  getNativeTimeResult: GetNativeTimeResult | null;
  getOpDataResult: GetOpDataResult | null;
  getOpKeysResult: GetOpKeysResult | null;
  getOriginOperationIdResult: GetOriginOperationIdResult | null;
  getOwnedAddressesResult: GetOwnedAddressesResult | null;
  getPubKeyVersionResult: GetPubKeyVersionResult | null;
  getRemainingGasResult: GetRemainingGasResult | null;
  getSignatureVersionResult: GetSignatureVersionResult | null;
  hashBlake3Result: HashBlake3Result | null;
  hashSha256Result: HashSha256Result | null;
  opEntryExistsResult: OpEntryExistsResult | null;
  keccak256Result: Keccak256Result | null;
  localExecutionResponse: LocalExecutionResponse | null;
  nativeAmountFromStringResult: NativeAmountFromStringResult | null;
  nativeAmountToStringResult: NativeAmountToStringResult | null;
  scalarDivRemNativeAmountResult: ScalarDivRemNativeAmountResult | null;
  scalarMulNativeAmountResult: ScalarMulNativeAmountResult | null;
  sendAsyncMessageResult: SendAsyncMessageResult | null;
  setBytecodeResult: SetBytecodeResult | null;
  setDsValueResult: SetDsValueResult | null;
  subNativeAmountResult: SubNativeAmountResult | null;
  transferCoinsResult: TransferCoinsResult | null;
  unsafeRandomResult: UnsafeRandomResult | null;
  evmVerifySigResult: EvmVerifySigResult | null;
  verifySigResult: VerifySigResult | null;
  evmGetAddressFromPubkeyResult: EvmGetAddressFromPubkeyResult | null;
  evmGetPubkeyFromSignatureResult: EvmGetPubkeyFromSignatureResult | null;
  isAddressEoaResult: IsAddressEoaResult | null;

  constructor(
    addNativeAmountResult: AddNativeAmountResult | null = null,
    addressFromPubKeyResult: AddressFromPubKeyResult | null = null,
    appendDsValueResult: AppendDsValueResult | null = null,
    base58CheckToBytesResult: Base58CheckToBytesResult | null = null,
    bytesToBase58CheckResult: BytesToBase58CheckResult | null = null,
    callerHasWriteAccessResult: CallerHasWriteAccessResult | null = null,
    checkAddressResult: CheckAddressResult | null = null,
    checkNativeAmountResult: CheckNativeAmountResult | null = null,
    checkPubKeyResult: CheckPubKeyResult | null = null,
    checkSigResult: CheckSigResult | null = null,
    checkedAddNativeTimeResult: CheckedAddNativeTimeResult | null = null,
    checkedDivRemNativeTimeResult: CheckedDivRemNativeTimeResult | null = null,
    checkedScalarDivRemNativeTimeResult: CheckedScalarDivRemNativeTimeResult | null = null,
    checkedScalarMulNativeTimeResult: CheckedScalarMulNativeTimeResult | null = null,
    checkedSubNativeTimeResult: CheckedSubNativeTimeResult | null = null,
    compareAddressResult: CompareAddressResult | null = null,
    compareNativeAmountResult: CompareNativeAmountResult | null = null,
    compareNativeTimeResult: CompareNativeTimeResult | null = null,
    comparePubKeyResult: ComparePubKeyResult | null = null,
    createScResult: CreateScResult | null = null,
    deleteDsEntryResult: DeleteDsEntryResult | null = null,
    divRemNativeAmountResult: DivRemNativeAmountResult | null = null,
    dsEntryExistsResult: DsEntryExistsResult | null = null,
    functionExistsResult: FunctionExistsResult | null = null,
    generateEventResult: GenerateEventResult | null = null,
    getAddressCategoryResult: GetAddressCategoryResult | null = null,
    getAddressVersionResult: GetAddressVersionResult | null = null,
    getBalanceResult: GetBalanceResult | null = null,
    getBytecodeResult: GetBytecodeResult | null = null,
    getCallCoinsResult: GetCallCoinsResult | null = null,
    getCallStackResult: GetCallStackResult | null = null,
    getCurrentSlotResult: GetCurrentSlotResult | null = null,
    getDsKeysResult: GetDsKeysResult | null = null,
    getDsValueResult: GetDsValueResult | null = null,
    getNativeTimeResult: GetNativeTimeResult | null = null,
    getOpDataResult: GetOpDataResult | null = null,
    getOpKeysResult: GetOpKeysResult | null = null,
    getOriginOperationIdResult: GetOriginOperationIdResult | null = null,
    getOwnedAddressesResult: GetOwnedAddressesResult | null = null,
    getPubKeyVersionResult: GetPubKeyVersionResult | null = null,
    getRemainingGasResult: GetRemainingGasResult | null = null,
    getSignatureVersionResult: GetSignatureVersionResult | null = null,
    hashBlake3Result: HashBlake3Result | null = null,
    hashSha256Result: HashSha256Result | null = null,
    opEntryExistsResult: OpEntryExistsResult | null = null,
    keccak256Result: Keccak256Result | null = null,
    localExecutionResponse: LocalExecutionResponse | null = null,
    nativeAmountFromStringResult: NativeAmountFromStringResult | null = null,
    nativeAmountToStringResult: NativeAmountToStringResult | null = null,
    scalarDivRemNativeAmountResult: ScalarDivRemNativeAmountResult | null = null,
    scalarMulNativeAmountResult: ScalarMulNativeAmountResult | null = null,
    sendAsyncMessageResult: SendAsyncMessageResult | null = null,
    setBytecodeResult: SetBytecodeResult | null = null,
    setDsValueResult: SetDsValueResult | null = null,
    subNativeAmountResult: SubNativeAmountResult | null = null,
    transferCoinsResult: TransferCoinsResult | null = null,
    unsafeRandomResult: UnsafeRandomResult | null = null,
    evmVerifySigResult: EvmVerifySigResult | null = null,
    verifySigResult: VerifySigResult | null = null,
    evmGetAddressFromPubkeyResult: EvmGetAddressFromPubkeyResult | null = null,
    evmGetPubkeyFromSignatureResult: EvmGetPubkeyFromSignatureResult | null = null,
    isAddressEoaResult: IsAddressEoaResult | null = null
  ) {
    this.addNativeAmountResult = addNativeAmountResult;
    this.addressFromPubKeyResult = addressFromPubKeyResult;
    this.appendDsValueResult = appendDsValueResult;
    this.base58CheckToBytesResult = base58CheckToBytesResult;
    this.bytesToBase58CheckResult = bytesToBase58CheckResult;
    this.callerHasWriteAccessResult = callerHasWriteAccessResult;
    this.checkAddressResult = checkAddressResult;
    this.checkNativeAmountResult = checkNativeAmountResult;
    this.checkPubKeyResult = checkPubKeyResult;
    this.checkSigResult = checkSigResult;
    this.checkedAddNativeTimeResult = checkedAddNativeTimeResult;
    this.checkedDivRemNativeTimeResult = checkedDivRemNativeTimeResult;
    this.checkedScalarDivRemNativeTimeResult =
      checkedScalarDivRemNativeTimeResult;
    this.checkedScalarMulNativeTimeResult = checkedScalarMulNativeTimeResult;
    this.checkedSubNativeTimeResult = checkedSubNativeTimeResult;
    this.compareAddressResult = compareAddressResult;
    this.compareNativeAmountResult = compareNativeAmountResult;
    this.compareNativeTimeResult = compareNativeTimeResult;
    this.comparePubKeyResult = comparePubKeyResult;
    this.createScResult = createScResult;
    this.deleteDsEntryResult = deleteDsEntryResult;
    this.divRemNativeAmountResult = divRemNativeAmountResult;
    this.dsEntryExistsResult = dsEntryExistsResult;
    this.functionExistsResult = functionExistsResult;
    this.generateEventResult = generateEventResult;
    this.getAddressCategoryResult = getAddressCategoryResult;
    this.getAddressVersionResult = getAddressVersionResult;
    this.getBalanceResult = getBalanceResult;
    this.getBytecodeResult = getBytecodeResult;
    this.getCallCoinsResult = getCallCoinsResult;
    this.getCallStackResult = getCallStackResult;
    this.getCurrentSlotResult = getCurrentSlotResult;
    this.getDsKeysResult = getDsKeysResult;
    this.getDsValueResult = getDsValueResult;
    this.getNativeTimeResult = getNativeTimeResult;
    this.getOpDataResult = getOpDataResult;
    this.getOpKeysResult = getOpKeysResult;
    this.getOriginOperationIdResult = getOriginOperationIdResult;
    this.getOwnedAddressesResult = getOwnedAddressesResult;
    this.getPubKeyVersionResult = getPubKeyVersionResult;
    this.getRemainingGasResult = getRemainingGasResult;
    this.getSignatureVersionResult = getSignatureVersionResult;
    this.hashBlake3Result = hashBlake3Result;
    this.hashSha256Result = hashSha256Result;
    this.opEntryExistsResult = opEntryExistsResult;
    this.keccak256Result = keccak256Result;
    this.localExecutionResponse = localExecutionResponse;
    this.nativeAmountFromStringResult = nativeAmountFromStringResult;
    this.nativeAmountToStringResult = nativeAmountToStringResult;
    this.scalarDivRemNativeAmountResult = scalarDivRemNativeAmountResult;
    this.scalarMulNativeAmountResult = scalarMulNativeAmountResult;
    this.sendAsyncMessageResult = sendAsyncMessageResult;
    this.setBytecodeResult = setBytecodeResult;
    this.setDsValueResult = setDsValueResult;
    this.subNativeAmountResult = subNativeAmountResult;
    this.transferCoinsResult = transferCoinsResult;
    this.unsafeRandomResult = unsafeRandomResult;
    this.evmVerifySigResult = evmVerifySigResult;
    this.verifySigResult = verifySigResult;
    this.evmGetAddressFromPubkeyResult = evmGetAddressFromPubkeyResult;
    this.evmGetPubkeyFromSignatureResult = evmGetPubkeyFromSignatureResult;
    this.isAddressEoaResult = isAddressEoaResult;
  }
}

export function encodeRespResult(message: RespResult): Uint8Array {
  return Protobuf.encode(message, RespResult.encode);
}

export function decodeRespResult(buffer: Uint8Array): RespResult {
  return Protobuf.decode<RespResult>(buffer, RespResult.decode);
}
