// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.22.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { NativeAddressToStringResult } from "./NativeAddressToStringResult";
import { NativePubKeyToStringResult } from "./NativePubKeyToStringResult";
import { NativeSigToStringResult } from "./NativeSigToStringResult";
import { NativeHashToStringResult } from "./NativeHashToStringResult";
import { NativeAmountToStringResult } from "./NativeAmountToStringResult";
import { NativeAddressFromStringResult } from "./NativeAddressFromStringResult";
import { NativePubKeyFromStringResult } from "./NativePubKeyFromStringResult";
import { NativeSigFromStringResult } from "./NativeSigFromStringResult";
import { NativeHashFromStringResult } from "./NativeHashFromStringResult";
import { NativeAmountFromStringResult } from "./NativeAmountFromStringResult";
import { CheckNativeAddressResult } from "./CheckNativeAddressResult";
import { CheckNativePubKeyResult } from "./CheckNativePubKeyResult";
import { CheckNativeSigResult } from "./CheckNativeSigResult";
import { CheckNativeHashResult } from "./CheckNativeHashResult";
import { CheckNativeAmountResult } from "./CheckNativeAmountResult";
import { AddNativeAmountsResult } from "./AddNativeAmountsResult";
import { SubNativeAmountsResult } from "./SubNativeAmountsResult";
import { MulNativeAmountResult } from "./MulNativeAmountResult";
import { ScalarDivRemNativeAmountResult } from "./ScalarDivRemNativeAmountResult";
import { DivRemNativeAmountResult } from "./DivRemNativeAmountResult";
import { CheckedAddNativeTimeResult } from "./CheckedAddNativeTimeResult";
import { CheckedSubNativeTimeResult } from "./CheckedSubNativeTimeResult";
import { CheckedMulNativeTimeResult } from "./CheckedMulNativeTimeResult";
import { CheckedScalarDivRemNativeTimeResult } from "./CheckedScalarDivRemNativeTimeResult";
import { CheckedDivRemNativeTimeResult } from "./CheckedDivRemNativeTimeResult";
import { CompareNativeTimeResult } from "./CompareNativeTimeResult";
import { CompareNativeAddressResult } from "./CompareNativeAddressResult";
import { CompareNativePubKeyResult } from "./CompareNativePubKeyResult";
import { CompareNativeSigResult } from "./CompareNativeSigResult";
import { VerifyNativeSigResult } from "./VerifyNativeSigResult";
import { CompareNativeAmountResult } from "./CompareNativeAmountResult";
import { Keccak256Result } from "./Keccak256Result";
import { VerifyEvmSigResult } from "./VerifyEvmSigResult";
import { VerifyBlsSingleSigResult } from "./VerifyBlsSingleSigResult";
import { VerifyBlsMultiSigResult } from "./VerifyBlsMultiSigResult";
import { TransferCoinsResult } from "./TransferCoinsResult";
import { GenerateEventResult } from "./GenerateEventResult";
import { CreateScResult } from "./CreateScResult";
import { FunctionExistsResult } from "./FunctionExistsResult";
import { TransferCoinsForResult } from "./TransferCoinsForResult";
import { NativeHashResult } from "./NativeHashResult";
import { GetKeysResult } from "./GetKeysResult";
import { GetKeysForResult } from "./GetKeysForResult";
import { SetDataResult } from "./SetDataResult";
import { AppendDataResult } from "./AppendDataResult";
import { GetDataResult } from "./GetDataResult";
import { HasDataResult } from "./HasDataResult";
import { DeleteDataResult } from "./DeleteDataResult";
import { SetDataForResult } from "./SetDataForResult";
import { AppendDataForResult } from "./AppendDataForResult";
import { GetDataForResult } from "./GetDataForResult";
import { DeleteDataForResult } from "./DeleteDataForResult";
import { HasDataForResult } from "./HasDataForResult";
import { GetOwnedAddressesResult } from "./GetOwnedAddressesResult";
import { GetCallStackResult } from "./GetCallStackResult";
import { NativeAddressFromNativePubKeyResult } from "./NativeAddressFromNativePubKeyResult";
import { UnsafeRandomResult } from "./UnsafeRandomResult";
import { GetNativeTimeResult } from "./GetNativeTimeResult";
import { GetCurrentPeriodResult } from "./GetCurrentPeriodResult";
import { GetCurrentThreadResult } from "./GetCurrentThreadResult";
import { SetBytecodeRequest } from "./SetBytecodeRequest";
import { SetBytecodeForRequest } from "./SetBytecodeForRequest";
import { GetBytecodeResult } from "./GetBytecodeResult";
import { GetBytecodeForResult } from "./GetBytecodeForResult";
import { CallerHasWriteAccessResult } from "./CallerHasWriteAccessResult";
import { SeedResult } from "./SeedResult";
import { DateNowResult } from "./DateNowResult";
import { ConsolePutResult } from "./ConsolePutResult";
import { TraceResult } from "./TraceResult";
import { ProcessExitResult } from "./ProcessExitResult";
import { HashSha256Result } from "./HashSha256Result";
import { GetOpDataResult } from "./GetOpDataResult";
import { HasOpKeyResult } from "./HasOpKeyResult";
import { GetOpKeysResult } from "./GetOpKeysResult";
import { PrintResult } from "./PrintResult";
import { GetRemainingGasResult } from "./GetRemainingGasResult";
import { GetBalanceResult } from "./GetBalanceResult";
import { GetBalanceForResult } from "./GetBalanceForResult";
import { GetCallCoinsResult } from "./GetCallCoinsResult";

export class RespResult {
  static encode(message: RespResult, writer: Writer): void {
    const nativeAddressToStringResult = message.nativeAddressToStringResult;
    if (nativeAddressToStringResult !== null) {
      writer.uint32(10);
      writer.fork();
      NativeAddressToStringResult.encode(nativeAddressToStringResult, writer);
      writer.ldelim();
    }

    const nativePubKeyToStringResult = message.nativePubKeyToStringResult;
    if (nativePubKeyToStringResult !== null) {
      writer.uint32(18);
      writer.fork();
      NativePubKeyToStringResult.encode(nativePubKeyToStringResult, writer);
      writer.ldelim();
    }

    const nativeSigToStringResult = message.nativeSigToStringResult;
    if (nativeSigToStringResult !== null) {
      writer.uint32(26);
      writer.fork();
      NativeSigToStringResult.encode(nativeSigToStringResult, writer);
      writer.ldelim();
    }

    const nativeHashToStringResult = message.nativeHashToStringResult;
    if (nativeHashToStringResult !== null) {
      writer.uint32(34);
      writer.fork();
      NativeHashToStringResult.encode(nativeHashToStringResult, writer);
      writer.ldelim();
    }

    const nativeAmountToStringResult = message.nativeAmountToStringResult;
    if (nativeAmountToStringResult !== null) {
      writer.uint32(42);
      writer.fork();
      NativeAmountToStringResult.encode(nativeAmountToStringResult, writer);
      writer.ldelim();
    }

    const nativeAddressFromStringResult = message.nativeAddressFromStringResult;
    if (nativeAddressFromStringResult !== null) {
      writer.uint32(50);
      writer.fork();
      NativeAddressFromStringResult.encode(
        nativeAddressFromStringResult,
        writer
      );
      writer.ldelim();
    }

    const nativePubKeyFromStringResult = message.nativePubKeyFromStringResult;
    if (nativePubKeyFromStringResult !== null) {
      writer.uint32(58);
      writer.fork();
      NativePubKeyFromStringResult.encode(nativePubKeyFromStringResult, writer);
      writer.ldelim();
    }

    const nativeSigFromStringResult = message.nativeSigFromStringResult;
    if (nativeSigFromStringResult !== null) {
      writer.uint32(66);
      writer.fork();
      NativeSigFromStringResult.encode(nativeSigFromStringResult, writer);
      writer.ldelim();
    }

    const nativeHashFromStringResult = message.nativeHashFromStringResult;
    if (nativeHashFromStringResult !== null) {
      writer.uint32(74);
      writer.fork();
      NativeHashFromStringResult.encode(nativeHashFromStringResult, writer);
      writer.ldelim();
    }

    const nativeAmountFromStringResult = message.nativeAmountFromStringResult;
    if (nativeAmountFromStringResult !== null) {
      writer.uint32(82);
      writer.fork();
      NativeAmountFromStringResult.encode(nativeAmountFromStringResult, writer);
      writer.ldelim();
    }

    const checkNativeAddressResult = message.checkNativeAddressResult;
    if (checkNativeAddressResult !== null) {
      writer.uint32(90);
      writer.fork();
      CheckNativeAddressResult.encode(checkNativeAddressResult, writer);
      writer.ldelim();
    }

    const checkNativePubKeyResult = message.checkNativePubKeyResult;
    if (checkNativePubKeyResult !== null) {
      writer.uint32(98);
      writer.fork();
      CheckNativePubKeyResult.encode(checkNativePubKeyResult, writer);
      writer.ldelim();
    }

    const checkNativeSigResult = message.checkNativeSigResult;
    if (checkNativeSigResult !== null) {
      writer.uint32(106);
      writer.fork();
      CheckNativeSigResult.encode(checkNativeSigResult, writer);
      writer.ldelim();
    }

    const checkNativeHashResult = message.checkNativeHashResult;
    if (checkNativeHashResult !== null) {
      writer.uint32(114);
      writer.fork();
      CheckNativeHashResult.encode(checkNativeHashResult, writer);
      writer.ldelim();
    }

    const checkNativeAmountResult = message.checkNativeAmountResult;
    if (checkNativeAmountResult !== null) {
      writer.uint32(122);
      writer.fork();
      CheckNativeAmountResult.encode(checkNativeAmountResult, writer);
      writer.ldelim();
    }

    const addNativeAmountsResult = message.addNativeAmountsResult;
    if (addNativeAmountsResult !== null) {
      writer.uint32(130);
      writer.fork();
      AddNativeAmountsResult.encode(addNativeAmountsResult, writer);
      writer.ldelim();
    }

    const subNativeAmountsResult = message.subNativeAmountsResult;
    if (subNativeAmountsResult !== null) {
      writer.uint32(138);
      writer.fork();
      SubNativeAmountsResult.encode(subNativeAmountsResult, writer);
      writer.ldelim();
    }

    const mulNativeAmountResult = message.mulNativeAmountResult;
    if (mulNativeAmountResult !== null) {
      writer.uint32(146);
      writer.fork();
      MulNativeAmountResult.encode(mulNativeAmountResult, writer);
      writer.ldelim();
    }

    const scalarDivRemNativeAmountResult =
      message.scalarDivRemNativeAmountResult;
    if (scalarDivRemNativeAmountResult !== null) {
      writer.uint32(154);
      writer.fork();
      ScalarDivRemNativeAmountResult.encode(
        scalarDivRemNativeAmountResult,
        writer
      );
      writer.ldelim();
    }

    const divRemNativeAmountResult = message.divRemNativeAmountResult;
    if (divRemNativeAmountResult !== null) {
      writer.uint32(162);
      writer.fork();
      DivRemNativeAmountResult.encode(divRemNativeAmountResult, writer);
      writer.ldelim();
    }

    const checkedAddNativeTimeResult = message.checkedAddNativeTimeResult;
    if (checkedAddNativeTimeResult !== null) {
      writer.uint32(170);
      writer.fork();
      CheckedAddNativeTimeResult.encode(checkedAddNativeTimeResult, writer);
      writer.ldelim();
    }

    const checkedSubNativeTimeResult = message.checkedSubNativeTimeResult;
    if (checkedSubNativeTimeResult !== null) {
      writer.uint32(178);
      writer.fork();
      CheckedSubNativeTimeResult.encode(checkedSubNativeTimeResult, writer);
      writer.ldelim();
    }

    const checkedMulNativeTimeResult = message.checkedMulNativeTimeResult;
    if (checkedMulNativeTimeResult !== null) {
      writer.uint32(186);
      writer.fork();
      CheckedMulNativeTimeResult.encode(checkedMulNativeTimeResult, writer);
      writer.ldelim();
    }

    const checkedScalarDivRemNativeTimeResult =
      message.checkedScalarDivRemNativeTimeResult;
    if (checkedScalarDivRemNativeTimeResult !== null) {
      writer.uint32(194);
      writer.fork();
      CheckedScalarDivRemNativeTimeResult.encode(
        checkedScalarDivRemNativeTimeResult,
        writer
      );
      writer.ldelim();
    }

    const checkedDivRemNativeTimeResult = message.checkedDivRemNativeTimeResult;
    if (checkedDivRemNativeTimeResult !== null) {
      writer.uint32(202);
      writer.fork();
      CheckedDivRemNativeTimeResult.encode(
        checkedDivRemNativeTimeResult,
        writer
      );
      writer.ldelim();
    }

    const compareNativeTimeResult = message.compareNativeTimeResult;
    if (compareNativeTimeResult !== null) {
      writer.uint32(210);
      writer.fork();
      CompareNativeTimeResult.encode(compareNativeTimeResult, writer);
      writer.ldelim();
    }

    const compareNativeAddressResult = message.compareNativeAddressResult;
    if (compareNativeAddressResult !== null) {
      writer.uint32(218);
      writer.fork();
      CompareNativeAddressResult.encode(compareNativeAddressResult, writer);
      writer.ldelim();
    }

    const compareNativePubKeyResult = message.compareNativePubKeyResult;
    if (compareNativePubKeyResult !== null) {
      writer.uint32(226);
      writer.fork();
      CompareNativePubKeyResult.encode(compareNativePubKeyResult, writer);
      writer.ldelim();
    }

    const compareNativeSigResult = message.compareNativeSigResult;
    if (compareNativeSigResult !== null) {
      writer.uint32(234);
      writer.fork();
      CompareNativeSigResult.encode(compareNativeSigResult, writer);
      writer.ldelim();
    }

    const verifyNativeSigResult = message.verifyNativeSigResult;
    if (verifyNativeSigResult !== null) {
      writer.uint32(242);
      writer.fork();
      VerifyNativeSigResult.encode(verifyNativeSigResult, writer);
      writer.ldelim();
    }

    const compareNativeAmountResult = message.compareNativeAmountResult;
    if (compareNativeAmountResult !== null) {
      writer.uint32(250);
      writer.fork();
      CompareNativeAmountResult.encode(compareNativeAmountResult, writer);
      writer.ldelim();
    }

    const keccak256Result = message.keccak256Result;
    if (keccak256Result !== null) {
      writer.uint32(258);
      writer.fork();
      Keccak256Result.encode(keccak256Result, writer);
      writer.ldelim();
    }

    const verifyEvmSigResult = message.verifyEvmSigResult;
    if (verifyEvmSigResult !== null) {
      writer.uint32(266);
      writer.fork();
      VerifyEvmSigResult.encode(verifyEvmSigResult, writer);
      writer.ldelim();
    }

    const verifyBlsSingleSigResult = message.verifyBlsSingleSigResult;
    if (verifyBlsSingleSigResult !== null) {
      writer.uint32(274);
      writer.fork();
      VerifyBlsSingleSigResult.encode(verifyBlsSingleSigResult, writer);
      writer.ldelim();
    }

    const verifyBlsMultiSigResult = message.verifyBlsMultiSigResult;
    if (verifyBlsMultiSigResult !== null) {
      writer.uint32(282);
      writer.fork();
      VerifyBlsMultiSigResult.encode(verifyBlsMultiSigResult, writer);
      writer.ldelim();
    }

    const transferCoinsResult = message.transferCoinsResult;
    if (transferCoinsResult !== null) {
      writer.uint32(290);
      writer.fork();
      TransferCoinsResult.encode(transferCoinsResult, writer);
      writer.ldelim();
    }

    const generateEventResult = message.generateEventResult;
    if (generateEventResult !== null) {
      writer.uint32(298);
      writer.fork();
      GenerateEventResult.encode(generateEventResult, writer);
      writer.ldelim();
    }

    const createScResult = message.createScResult;
    if (createScResult !== null) {
      writer.uint32(306);
      writer.fork();
      CreateScResult.encode(createScResult, writer);
      writer.ldelim();
    }

    const functionExistsResult = message.functionExistsResult;
    if (functionExistsResult !== null) {
      writer.uint32(314);
      writer.fork();
      FunctionExistsResult.encode(functionExistsResult, writer);
      writer.ldelim();
    }

    const transferCoinsForResult = message.transferCoinsForResult;
    if (transferCoinsForResult !== null) {
      writer.uint32(322);
      writer.fork();
      TransferCoinsForResult.encode(transferCoinsForResult, writer);
      writer.ldelim();
    }

    const nativeHashResult = message.nativeHashResult;
    if (nativeHashResult !== null) {
      writer.uint32(330);
      writer.fork();
      NativeHashResult.encode(nativeHashResult, writer);
      writer.ldelim();
    }

    const getKeysResult = message.getKeysResult;
    if (getKeysResult !== null) {
      writer.uint32(338);
      writer.fork();
      GetKeysResult.encode(getKeysResult, writer);
      writer.ldelim();
    }

    const getKeysForResult = message.getKeysForResult;
    if (getKeysForResult !== null) {
      writer.uint32(346);
      writer.fork();
      GetKeysForResult.encode(getKeysForResult, writer);
      writer.ldelim();
    }

    const setDataResult = message.setDataResult;
    if (setDataResult !== null) {
      writer.uint32(354);
      writer.fork();
      SetDataResult.encode(setDataResult, writer);
      writer.ldelim();
    }

    const appendDataResult = message.appendDataResult;
    if (appendDataResult !== null) {
      writer.uint32(362);
      writer.fork();
      AppendDataResult.encode(appendDataResult, writer);
      writer.ldelim();
    }

    const getDataResult = message.getDataResult;
    if (getDataResult !== null) {
      writer.uint32(370);
      writer.fork();
      GetDataResult.encode(getDataResult, writer);
      writer.ldelim();
    }

    const hasDataResult = message.hasDataResult;
    if (hasDataResult !== null) {
      writer.uint32(378);
      writer.fork();
      HasDataResult.encode(hasDataResult, writer);
      writer.ldelim();
    }

    const deleteDataResult = message.deleteDataResult;
    if (deleteDataResult !== null) {
      writer.uint32(386);
      writer.fork();
      DeleteDataResult.encode(deleteDataResult, writer);
      writer.ldelim();
    }

    const setDataForResult = message.setDataForResult;
    if (setDataForResult !== null) {
      writer.uint32(394);
      writer.fork();
      SetDataForResult.encode(setDataForResult, writer);
      writer.ldelim();
    }

    const appendDataForResult = message.appendDataForResult;
    if (appendDataForResult !== null) {
      writer.uint32(402);
      writer.fork();
      AppendDataForResult.encode(appendDataForResult, writer);
      writer.ldelim();
    }

    const getDataForResult = message.getDataForResult;
    if (getDataForResult !== null) {
      writer.uint32(410);
      writer.fork();
      GetDataForResult.encode(getDataForResult, writer);
      writer.ldelim();
    }

    const deleteDataForResult = message.deleteDataForResult;
    if (deleteDataForResult !== null) {
      writer.uint32(418);
      writer.fork();
      DeleteDataForResult.encode(deleteDataForResult, writer);
      writer.ldelim();
    }

    const hasDataForResult = message.hasDataForResult;
    if (hasDataForResult !== null) {
      writer.uint32(426);
      writer.fork();
      HasDataForResult.encode(hasDataForResult, writer);
      writer.ldelim();
    }

    const getOwnedAddressesResult = message.getOwnedAddressesResult;
    if (getOwnedAddressesResult !== null) {
      writer.uint32(434);
      writer.fork();
      GetOwnedAddressesResult.encode(getOwnedAddressesResult, writer);
      writer.ldelim();
    }

    const getCallStackResult = message.getCallStackResult;
    if (getCallStackResult !== null) {
      writer.uint32(442);
      writer.fork();
      GetCallStackResult.encode(getCallStackResult, writer);
      writer.ldelim();
    }

    const nativeAddressFromNativePubKeyResult =
      message.nativeAddressFromNativePubKeyResult;
    if (nativeAddressFromNativePubKeyResult !== null) {
      writer.uint32(450);
      writer.fork();
      NativeAddressFromNativePubKeyResult.encode(
        nativeAddressFromNativePubKeyResult,
        writer
      );
      writer.ldelim();
    }

    const unsafeRandomRequestResult = message.unsafeRandomRequestResult;
    if (unsafeRandomRequestResult !== null) {
      writer.uint32(458);
      writer.fork();
      UnsafeRandomResult.encode(unsafeRandomRequestResult, writer);
      writer.ldelim();
    }

    const getNativeTimeResult = message.getNativeTimeResult;
    if (getNativeTimeResult !== null) {
      writer.uint32(466);
      writer.fork();
      GetNativeTimeResult.encode(getNativeTimeResult, writer);
      writer.ldelim();
    }

    const getCurrentPeriodResult = message.getCurrentPeriodResult;
    if (getCurrentPeriodResult !== null) {
      writer.uint32(474);
      writer.fork();
      GetCurrentPeriodResult.encode(getCurrentPeriodResult, writer);
      writer.ldelim();
    }

    const getCurrentThreadResult = message.getCurrentThreadResult;
    if (getCurrentThreadResult !== null) {
      writer.uint32(482);
      writer.fork();
      GetCurrentThreadResult.encode(getCurrentThreadResult, writer);
      writer.ldelim();
    }

    const setBytecodeRequestResult = message.setBytecodeRequestResult;
    if (setBytecodeRequestResult !== null) {
      writer.uint32(490);
      writer.fork();
      SetBytecodeRequest.encode(setBytecodeRequestResult, writer);
      writer.ldelim();
    }

    const setBytecodeForRequestResult = message.setBytecodeForRequestResult;
    if (setBytecodeForRequestResult !== null) {
      writer.uint32(498);
      writer.fork();
      SetBytecodeForRequest.encode(setBytecodeForRequestResult, writer);
      writer.ldelim();
    }

    const getBytecodeResult = message.getBytecodeResult;
    if (getBytecodeResult !== null) {
      writer.uint32(506);
      writer.fork();
      GetBytecodeResult.encode(getBytecodeResult, writer);
      writer.ldelim();
    }

    const getBytecodeForResult = message.getBytecodeForResult;
    if (getBytecodeForResult !== null) {
      writer.uint32(514);
      writer.fork();
      GetBytecodeForResult.encode(getBytecodeForResult, writer);
      writer.ldelim();
    }

    const callerHasWriteAccessResult = message.callerHasWriteAccessResult;
    if (callerHasWriteAccessResult !== null) {
      writer.uint32(522);
      writer.fork();
      CallerHasWriteAccessResult.encode(callerHasWriteAccessResult, writer);
      writer.ldelim();
    }

    const seedResult = message.seedResult;
    if (seedResult !== null) {
      writer.uint32(530);
      writer.fork();
      SeedResult.encode(seedResult, writer);
      writer.ldelim();
    }

    const dateNowResult = message.dateNowResult;
    if (dateNowResult !== null) {
      writer.uint32(538);
      writer.fork();
      DateNowResult.encode(dateNowResult, writer);
      writer.ldelim();
    }

    const consolePutResult = message.consolePutResult;
    if (consolePutResult !== null) {
      writer.uint32(546);
      writer.fork();
      ConsolePutResult.encode(consolePutResult, writer);
      writer.ldelim();
    }

    const traceResult = message.traceResult;
    if (traceResult !== null) {
      writer.uint32(554);
      writer.fork();
      TraceResult.encode(traceResult, writer);
      writer.ldelim();
    }

    const processExitResult = message.processExitResult;
    if (processExitResult !== null) {
      writer.uint32(562);
      writer.fork();
      ProcessExitResult.encode(processExitResult, writer);
      writer.ldelim();
    }

    const hashSha256Result = message.hashSha256Result;
    if (hashSha256Result !== null) {
      writer.uint32(570);
      writer.fork();
      HashSha256Result.encode(hashSha256Result, writer);
      writer.ldelim();
    }

    const getOpDataResult = message.getOpDataResult;
    if (getOpDataResult !== null) {
      writer.uint32(578);
      writer.fork();
      GetOpDataResult.encode(getOpDataResult, writer);
      writer.ldelim();
    }

    const hasOpKeyResult = message.hasOpKeyResult;
    if (hasOpKeyResult !== null) {
      writer.uint32(586);
      writer.fork();
      HasOpKeyResult.encode(hasOpKeyResult, writer);
      writer.ldelim();
    }

    const getOpKeysResult = message.getOpKeysResult;
    if (getOpKeysResult !== null) {
      writer.uint32(594);
      writer.fork();
      GetOpKeysResult.encode(getOpKeysResult, writer);
      writer.ldelim();
    }

    const printResult = message.printResult;
    if (printResult !== null) {
      writer.uint32(602);
      writer.fork();
      PrintResult.encode(printResult, writer);
      writer.ldelim();
    }

    const getRemainingGasResult = message.getRemainingGasResult;
    if (getRemainingGasResult !== null) {
      writer.uint32(610);
      writer.fork();
      GetRemainingGasResult.encode(getRemainingGasResult, writer);
      writer.ldelim();
    }

    const getBalanceResult = message.getBalanceResult;
    if (getBalanceResult !== null) {
      writer.uint32(618);
      writer.fork();
      GetBalanceResult.encode(getBalanceResult, writer);
      writer.ldelim();
    }

    const getBalanceForResult = message.getBalanceForResult;
    if (getBalanceForResult !== null) {
      writer.uint32(626);
      writer.fork();
      GetBalanceForResult.encode(getBalanceForResult, writer);
      writer.ldelim();
    }

    const getCallCoinsResult = message.getCallCoinsResult;
    if (getCallCoinsResult !== null) {
      writer.uint32(634);
      writer.fork();
      GetCallCoinsResult.encode(getCallCoinsResult, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): RespResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new RespResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.nativeAddressToStringResult =
            NativeAddressToStringResult.decode(reader, reader.uint32());
          break;

        case 2:
          message.nativePubKeyToStringResult =
            NativePubKeyToStringResult.decode(reader, reader.uint32());
          break;

        case 3:
          message.nativeSigToStringResult = NativeSigToStringResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.nativeHashToStringResult = NativeHashToStringResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.nativeAmountToStringResult =
            NativeAmountToStringResult.decode(reader, reader.uint32());
          break;

        case 6:
          message.nativeAddressFromStringResult =
            NativeAddressFromStringResult.decode(reader, reader.uint32());
          break;

        case 7:
          message.nativePubKeyFromStringResult =
            NativePubKeyFromStringResult.decode(reader, reader.uint32());
          break;

        case 8:
          message.nativeSigFromStringResult = NativeSigFromStringResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 9:
          message.nativeHashFromStringResult =
            NativeHashFromStringResult.decode(reader, reader.uint32());
          break;

        case 10:
          message.nativeAmountFromStringResult =
            NativeAmountFromStringResult.decode(reader, reader.uint32());
          break;

        case 11:
          message.checkNativeAddressResult = CheckNativeAddressResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 12:
          message.checkNativePubKeyResult = CheckNativePubKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 13:
          message.checkNativeSigResult = CheckNativeSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 14:
          message.checkNativeHashResult = CheckNativeHashResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 15:
          message.checkNativeAmountResult = CheckNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 16:
          message.addNativeAmountsResult = AddNativeAmountsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 17:
          message.subNativeAmountsResult = SubNativeAmountsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 18:
          message.mulNativeAmountResult = MulNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 19:
          message.scalarDivRemNativeAmountResult =
            ScalarDivRemNativeAmountResult.decode(reader, reader.uint32());
          break;

        case 20:
          message.divRemNativeAmountResult = DivRemNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 21:
          message.checkedAddNativeTimeResult =
            CheckedAddNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 22:
          message.checkedSubNativeTimeResult =
            CheckedSubNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 23:
          message.checkedMulNativeTimeResult =
            CheckedMulNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 24:
          message.checkedScalarDivRemNativeTimeResult =
            CheckedScalarDivRemNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 25:
          message.checkedDivRemNativeTimeResult =
            CheckedDivRemNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 26:
          message.compareNativeTimeResult = CompareNativeTimeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 27:
          message.compareNativeAddressResult =
            CompareNativeAddressResult.decode(reader, reader.uint32());
          break;

        case 28:
          message.compareNativePubKeyResult = CompareNativePubKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 29:
          message.compareNativeSigResult = CompareNativeSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 30:
          message.verifyNativeSigResult = VerifyNativeSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 31:
          message.compareNativeAmountResult = CompareNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 32:
          message.keccak256Result = Keccak256Result.decode(
            reader,
            reader.uint32()
          );
          break;

        case 33:
          message.verifyEvmSigResult = VerifyEvmSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 34:
          message.verifyBlsSingleSigResult = VerifyBlsSingleSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 35:
          message.verifyBlsMultiSigResult = VerifyBlsMultiSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 36:
          message.transferCoinsResult = TransferCoinsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 37:
          message.generateEventResult = GenerateEventResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 38:
          message.createScResult = CreateScResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 39:
          message.functionExistsResult = FunctionExistsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 40:
          message.transferCoinsForResult = TransferCoinsForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 41:
          message.nativeHashResult = NativeHashResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 42:
          message.getKeysResult = GetKeysResult.decode(reader, reader.uint32());
          break;

        case 43:
          message.getKeysForResult = GetKeysForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 44:
          message.setDataResult = SetDataResult.decode(reader, reader.uint32());
          break;

        case 45:
          message.appendDataResult = AppendDataResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 46:
          message.getDataResult = GetDataResult.decode(reader, reader.uint32());
          break;

        case 47:
          message.hasDataResult = HasDataResult.decode(reader, reader.uint32());
          break;

        case 48:
          message.deleteDataResult = DeleteDataResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 49:
          message.setDataForResult = SetDataForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 50:
          message.appendDataForResult = AppendDataForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 51:
          message.getDataForResult = GetDataForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 52:
          message.deleteDataForResult = DeleteDataForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 53:
          message.hasDataForResult = HasDataForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 54:
          message.getOwnedAddressesResult = GetOwnedAddressesResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 55:
          message.getCallStackResult = GetCallStackResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 56:
          message.nativeAddressFromNativePubKeyResult =
            NativeAddressFromNativePubKeyResult.decode(reader, reader.uint32());
          break;

        case 57:
          message.unsafeRandomRequestResult = UnsafeRandomResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 58:
          message.getNativeTimeResult = GetNativeTimeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 59:
          message.getCurrentPeriodResult = GetCurrentPeriodResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 60:
          message.getCurrentThreadResult = GetCurrentThreadResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 61:
          message.setBytecodeRequestResult = SetBytecodeRequest.decode(
            reader,
            reader.uint32()
          );
          break;

        case 62:
          message.setBytecodeForRequestResult = SetBytecodeForRequest.decode(
            reader,
            reader.uint32()
          );
          break;

        case 63:
          message.getBytecodeResult = GetBytecodeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 64:
          message.getBytecodeForResult = GetBytecodeForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 65:
          message.callerHasWriteAccessResult =
            CallerHasWriteAccessResult.decode(reader, reader.uint32());
          break;

        case 66:
          message.seedResult = SeedResult.decode(reader, reader.uint32());
          break;

        case 67:
          message.dateNowResult = DateNowResult.decode(reader, reader.uint32());
          break;

        case 68:
          message.consolePutResult = ConsolePutResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 69:
          message.traceResult = TraceResult.decode(reader, reader.uint32());
          break;

        case 70:
          message.processExitResult = ProcessExitResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 71:
          message.hashSha256Result = HashSha256Result.decode(
            reader,
            reader.uint32()
          );
          break;

        case 72:
          message.getOpDataResult = GetOpDataResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 73:
          message.hasOpKeyResult = HasOpKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 74:
          message.getOpKeysResult = GetOpKeysResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 75:
          message.printResult = PrintResult.decode(reader, reader.uint32());
          break;

        case 76:
          message.getRemainingGasResult = GetRemainingGasResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 77:
          message.getBalanceResult = GetBalanceResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 78:
          message.getBalanceForResult = GetBalanceForResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 79:
          message.getCallCoinsResult = GetCallCoinsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  nativeAddressToStringResult: NativeAddressToStringResult | null;
  nativePubKeyToStringResult: NativePubKeyToStringResult | null;
  nativeSigToStringResult: NativeSigToStringResult | null;
  nativeHashToStringResult: NativeHashToStringResult | null;
  nativeAmountToStringResult: NativeAmountToStringResult | null;
  nativeAddressFromStringResult: NativeAddressFromStringResult | null;
  nativePubKeyFromStringResult: NativePubKeyFromStringResult | null;
  nativeSigFromStringResult: NativeSigFromStringResult | null;
  nativeHashFromStringResult: NativeHashFromStringResult | null;
  nativeAmountFromStringResult: NativeAmountFromStringResult | null;
  checkNativeAddressResult: CheckNativeAddressResult | null;
  checkNativePubKeyResult: CheckNativePubKeyResult | null;
  checkNativeSigResult: CheckNativeSigResult | null;
  checkNativeHashResult: CheckNativeHashResult | null;
  checkNativeAmountResult: CheckNativeAmountResult | null;
  addNativeAmountsResult: AddNativeAmountsResult | null;
  subNativeAmountsResult: SubNativeAmountsResult | null;
  mulNativeAmountResult: MulNativeAmountResult | null;
  scalarDivRemNativeAmountResult: ScalarDivRemNativeAmountResult | null;
  divRemNativeAmountResult: DivRemNativeAmountResult | null;
  checkedAddNativeTimeResult: CheckedAddNativeTimeResult | null;
  checkedSubNativeTimeResult: CheckedSubNativeTimeResult | null;
  checkedMulNativeTimeResult: CheckedMulNativeTimeResult | null;
  checkedScalarDivRemNativeTimeResult: CheckedScalarDivRemNativeTimeResult | null;
  checkedDivRemNativeTimeResult: CheckedDivRemNativeTimeResult | null;
  compareNativeTimeResult: CompareNativeTimeResult | null;
  compareNativeAddressResult: CompareNativeAddressResult | null;
  compareNativePubKeyResult: CompareNativePubKeyResult | null;
  compareNativeSigResult: CompareNativeSigResult | null;
  verifyNativeSigResult: VerifyNativeSigResult | null;
  compareNativeAmountResult: CompareNativeAmountResult | null;
  keccak256Result: Keccak256Result | null;
  verifyEvmSigResult: VerifyEvmSigResult | null;
  verifyBlsSingleSigResult: VerifyBlsSingleSigResult | null;
  verifyBlsMultiSigResult: VerifyBlsMultiSigResult | null;
  transferCoinsResult: TransferCoinsResult | null;
  generateEventResult: GenerateEventResult | null;
  createScResult: CreateScResult | null;
  functionExistsResult: FunctionExistsResult | null;
  transferCoinsForResult: TransferCoinsForResult | null;
  nativeHashResult: NativeHashResult | null;
  getKeysResult: GetKeysResult | null;
  getKeysForResult: GetKeysForResult | null;
  setDataResult: SetDataResult | null;
  appendDataResult: AppendDataResult | null;
  getDataResult: GetDataResult | null;
  hasDataResult: HasDataResult | null;
  deleteDataResult: DeleteDataResult | null;
  setDataForResult: SetDataForResult | null;
  appendDataForResult: AppendDataForResult | null;
  getDataForResult: GetDataForResult | null;
  deleteDataForResult: DeleteDataForResult | null;
  hasDataForResult: HasDataForResult | null;
  getOwnedAddressesResult: GetOwnedAddressesResult | null;
  getCallStackResult: GetCallStackResult | null;
  nativeAddressFromNativePubKeyResult: NativeAddressFromNativePubKeyResult | null;
  unsafeRandomRequestResult: UnsafeRandomResult | null;
  getNativeTimeResult: GetNativeTimeResult | null;
  getCurrentPeriodResult: GetCurrentPeriodResult | null;
  getCurrentThreadResult: GetCurrentThreadResult | null;
  setBytecodeRequestResult: SetBytecodeRequest | null;
  setBytecodeForRequestResult: SetBytecodeForRequest | null;
  getBytecodeResult: GetBytecodeResult | null;
  getBytecodeForResult: GetBytecodeForResult | null;
  callerHasWriteAccessResult: CallerHasWriteAccessResult | null;
  seedResult: SeedResult | null;
  dateNowResult: DateNowResult | null;
  consolePutResult: ConsolePutResult | null;
  traceResult: TraceResult | null;
  processExitResult: ProcessExitResult | null;
  hashSha256Result: HashSha256Result | null;
  getOpDataResult: GetOpDataResult | null;
  hasOpKeyResult: HasOpKeyResult | null;
  getOpKeysResult: GetOpKeysResult | null;
  printResult: PrintResult | null;
  getRemainingGasResult: GetRemainingGasResult | null;
  getBalanceResult: GetBalanceResult | null;
  getBalanceForResult: GetBalanceForResult | null;
  getCallCoinsResult: GetCallCoinsResult | null;

  constructor(
    nativeAddressToStringResult: NativeAddressToStringResult | null = null,
    nativePubKeyToStringResult: NativePubKeyToStringResult | null = null,
    nativeSigToStringResult: NativeSigToStringResult | null = null,
    nativeHashToStringResult: NativeHashToStringResult | null = null,
    nativeAmountToStringResult: NativeAmountToStringResult | null = null,
    nativeAddressFromStringResult: NativeAddressFromStringResult | null = null,
    nativePubKeyFromStringResult: NativePubKeyFromStringResult | null = null,
    nativeSigFromStringResult: NativeSigFromStringResult | null = null,
    nativeHashFromStringResult: NativeHashFromStringResult | null = null,
    nativeAmountFromStringResult: NativeAmountFromStringResult | null = null,
    checkNativeAddressResult: CheckNativeAddressResult | null = null,
    checkNativePubKeyResult: CheckNativePubKeyResult | null = null,
    checkNativeSigResult: CheckNativeSigResult | null = null,
    checkNativeHashResult: CheckNativeHashResult | null = null,
    checkNativeAmountResult: CheckNativeAmountResult | null = null,
    addNativeAmountsResult: AddNativeAmountsResult | null = null,
    subNativeAmountsResult: SubNativeAmountsResult | null = null,
    mulNativeAmountResult: MulNativeAmountResult | null = null,
    scalarDivRemNativeAmountResult: ScalarDivRemNativeAmountResult | null = null,
    divRemNativeAmountResult: DivRemNativeAmountResult | null = null,
    checkedAddNativeTimeResult: CheckedAddNativeTimeResult | null = null,
    checkedSubNativeTimeResult: CheckedSubNativeTimeResult | null = null,
    checkedMulNativeTimeResult: CheckedMulNativeTimeResult | null = null,
    checkedScalarDivRemNativeTimeResult: CheckedScalarDivRemNativeTimeResult | null = null,
    checkedDivRemNativeTimeResult: CheckedDivRemNativeTimeResult | null = null,
    compareNativeTimeResult: CompareNativeTimeResult | null = null,
    compareNativeAddressResult: CompareNativeAddressResult | null = null,
    compareNativePubKeyResult: CompareNativePubKeyResult | null = null,
    compareNativeSigResult: CompareNativeSigResult | null = null,
    verifyNativeSigResult: VerifyNativeSigResult | null = null,
    compareNativeAmountResult: CompareNativeAmountResult | null = null,
    keccak256Result: Keccak256Result | null = null,
    verifyEvmSigResult: VerifyEvmSigResult | null = null,
    verifyBlsSingleSigResult: VerifyBlsSingleSigResult | null = null,
    verifyBlsMultiSigResult: VerifyBlsMultiSigResult | null = null,
    transferCoinsResult: TransferCoinsResult | null = null,
    generateEventResult: GenerateEventResult | null = null,
    createScResult: CreateScResult | null = null,
    functionExistsResult: FunctionExistsResult | null = null,
    transferCoinsForResult: TransferCoinsForResult | null = null,
    nativeHashResult: NativeHashResult | null = null,
    getKeysResult: GetKeysResult | null = null,
    getKeysForResult: GetKeysForResult | null = null,
    setDataResult: SetDataResult | null = null,
    appendDataResult: AppendDataResult | null = null,
    getDataResult: GetDataResult | null = null,
    hasDataResult: HasDataResult | null = null,
    deleteDataResult: DeleteDataResult | null = null,
    setDataForResult: SetDataForResult | null = null,
    appendDataForResult: AppendDataForResult | null = null,
    getDataForResult: GetDataForResult | null = null,
    deleteDataForResult: DeleteDataForResult | null = null,
    hasDataForResult: HasDataForResult | null = null,
    getOwnedAddressesResult: GetOwnedAddressesResult | null = null,
    getCallStackResult: GetCallStackResult | null = null,
    nativeAddressFromNativePubKeyResult: NativeAddressFromNativePubKeyResult | null = null,
    unsafeRandomRequestResult: UnsafeRandomResult | null = null,
    getNativeTimeResult: GetNativeTimeResult | null = null,
    getCurrentPeriodResult: GetCurrentPeriodResult | null = null,
    getCurrentThreadResult: GetCurrentThreadResult | null = null,
    setBytecodeRequestResult: SetBytecodeRequest | null = null,
    setBytecodeForRequestResult: SetBytecodeForRequest | null = null,
    getBytecodeResult: GetBytecodeResult | null = null,
    getBytecodeForResult: GetBytecodeForResult | null = null,
    callerHasWriteAccessResult: CallerHasWriteAccessResult | null = null,
    seedResult: SeedResult | null = null,
    dateNowResult: DateNowResult | null = null,
    consolePutResult: ConsolePutResult | null = null,
    traceResult: TraceResult | null = null,
    processExitResult: ProcessExitResult | null = null,
    hashSha256Result: HashSha256Result | null = null,
    getOpDataResult: GetOpDataResult | null = null,
    hasOpKeyResult: HasOpKeyResult | null = null,
    getOpKeysResult: GetOpKeysResult | null = null,
    printResult: PrintResult | null = null,
    getRemainingGasResult: GetRemainingGasResult | null = null,
    getBalanceResult: GetBalanceResult | null = null,
    getBalanceForResult: GetBalanceForResult | null = null,
    getCallCoinsResult: GetCallCoinsResult | null = null
  ) {
    this.nativeAddressToStringResult = nativeAddressToStringResult;
    this.nativePubKeyToStringResult = nativePubKeyToStringResult;
    this.nativeSigToStringResult = nativeSigToStringResult;
    this.nativeHashToStringResult = nativeHashToStringResult;
    this.nativeAmountToStringResult = nativeAmountToStringResult;
    this.nativeAddressFromStringResult = nativeAddressFromStringResult;
    this.nativePubKeyFromStringResult = nativePubKeyFromStringResult;
    this.nativeSigFromStringResult = nativeSigFromStringResult;
    this.nativeHashFromStringResult = nativeHashFromStringResult;
    this.nativeAmountFromStringResult = nativeAmountFromStringResult;
    this.checkNativeAddressResult = checkNativeAddressResult;
    this.checkNativePubKeyResult = checkNativePubKeyResult;
    this.checkNativeSigResult = checkNativeSigResult;
    this.checkNativeHashResult = checkNativeHashResult;
    this.checkNativeAmountResult = checkNativeAmountResult;
    this.addNativeAmountsResult = addNativeAmountsResult;
    this.subNativeAmountsResult = subNativeAmountsResult;
    this.mulNativeAmountResult = mulNativeAmountResult;
    this.scalarDivRemNativeAmountResult = scalarDivRemNativeAmountResult;
    this.divRemNativeAmountResult = divRemNativeAmountResult;
    this.checkedAddNativeTimeResult = checkedAddNativeTimeResult;
    this.checkedSubNativeTimeResult = checkedSubNativeTimeResult;
    this.checkedMulNativeTimeResult = checkedMulNativeTimeResult;
    this.checkedScalarDivRemNativeTimeResult =
      checkedScalarDivRemNativeTimeResult;
    this.checkedDivRemNativeTimeResult = checkedDivRemNativeTimeResult;
    this.compareNativeTimeResult = compareNativeTimeResult;
    this.compareNativeAddressResult = compareNativeAddressResult;
    this.compareNativePubKeyResult = compareNativePubKeyResult;
    this.compareNativeSigResult = compareNativeSigResult;
    this.verifyNativeSigResult = verifyNativeSigResult;
    this.compareNativeAmountResult = compareNativeAmountResult;
    this.keccak256Result = keccak256Result;
    this.verifyEvmSigResult = verifyEvmSigResult;
    this.verifyBlsSingleSigResult = verifyBlsSingleSigResult;
    this.verifyBlsMultiSigResult = verifyBlsMultiSigResult;
    this.transferCoinsResult = transferCoinsResult;
    this.generateEventResult = generateEventResult;
    this.createScResult = createScResult;
    this.functionExistsResult = functionExistsResult;
    this.transferCoinsForResult = transferCoinsForResult;
    this.nativeHashResult = nativeHashResult;
    this.getKeysResult = getKeysResult;
    this.getKeysForResult = getKeysForResult;
    this.setDataResult = setDataResult;
    this.appendDataResult = appendDataResult;
    this.getDataResult = getDataResult;
    this.hasDataResult = hasDataResult;
    this.deleteDataResult = deleteDataResult;
    this.setDataForResult = setDataForResult;
    this.appendDataForResult = appendDataForResult;
    this.getDataForResult = getDataForResult;
    this.deleteDataForResult = deleteDataForResult;
    this.hasDataForResult = hasDataForResult;
    this.getOwnedAddressesResult = getOwnedAddressesResult;
    this.getCallStackResult = getCallStackResult;
    this.nativeAddressFromNativePubKeyResult =
      nativeAddressFromNativePubKeyResult;
    this.unsafeRandomRequestResult = unsafeRandomRequestResult;
    this.getNativeTimeResult = getNativeTimeResult;
    this.getCurrentPeriodResult = getCurrentPeriodResult;
    this.getCurrentThreadResult = getCurrentThreadResult;
    this.setBytecodeRequestResult = setBytecodeRequestResult;
    this.setBytecodeForRequestResult = setBytecodeForRequestResult;
    this.getBytecodeResult = getBytecodeResult;
    this.getBytecodeForResult = getBytecodeForResult;
    this.callerHasWriteAccessResult = callerHasWriteAccessResult;
    this.seedResult = seedResult;
    this.dateNowResult = dateNowResult;
    this.consolePutResult = consolePutResult;
    this.traceResult = traceResult;
    this.processExitResult = processExitResult;
    this.hashSha256Result = hashSha256Result;
    this.getOpDataResult = getOpDataResult;
    this.hasOpKeyResult = hasOpKeyResult;
    this.getOpKeysResult = getOpKeysResult;
    this.printResult = printResult;
    this.getRemainingGasResult = getRemainingGasResult;
    this.getBalanceResult = getBalanceResult;
    this.getBalanceForResult = getBalanceForResult;
    this.getCallCoinsResult = getCallCoinsResult;
  }
}

export function encodeRespResult(message: RespResult): Uint8Array {
  return Protobuf.encode(message, RespResult.encode);
}

export function decodeRespResult(buffer: Uint8Array): RespResult {
  return Protobuf.decode<RespResult>(buffer, RespResult.decode);
}
