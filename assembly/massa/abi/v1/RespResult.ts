// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { AddNativeAmountsResult } from "./AddNativeAmountsResult";
import { AddressFromPubKeyResult } from "./AddressFromPubKeyResult";
import { AppendDataResult } from "./AppendDataResult";
import { Base58CheckToBytesResult } from "./Base58CheckToBytesResult";
import { Blake3HashResult } from "./Blake3HashResult";
import { BytesToBase58CheckResult } from "./BytesToBase58CheckResult";
import { CallerHasWriteAccessResult } from "./CallerHasWriteAccessResult";
import { CheckAddressResult } from "./CheckAddressResult";
import { CheckNativeAmountResult } from "./CheckNativeAmountResult";
import { CheckPubKeyResult } from "./CheckPubKeyResult";
import { CheckSigResult } from "./CheckSigResult";
import { CheckedAddNativeTimeResult } from "./CheckedAddNativeTimeResult";
import { CheckedDivRemNativeTimeResult } from "./CheckedDivRemNativeTimeResult";
import { CheckedMulNativeTimeResult } from "./CheckedMulNativeTimeResult";
import { CheckedScalarDivRemNativeTimeResult } from "./CheckedScalarDivRemNativeTimeResult";
import { CheckedSubNativeTimeResult } from "./CheckedSubNativeTimeResult";
import { CompareAddressResult } from "./CompareAddressResult";
import { CompareNativeAmountResult } from "./CompareNativeAmountResult";
import { CompareNativeTimeResult } from "./CompareNativeTimeResult";
import { ComparePubKeyResult } from "./ComparePubKeyResult";
import { CreateScResult } from "./CreateScResult";
import { DateNowResult } from "./DateNowResult";
import { DeleteDataResult } from "./DeleteDataResult";
import { DivRemNativeAmountsResult } from "./DivRemNativeAmountsResult";
import { FunctionExistsResult } from "./FunctionExistsResult";
import { GenerateEventResult } from "./GenerateEventResult";
import { GetAddressCategoryResult } from "./GetAddressCategoryResult";
import { GetAddressVersionResult } from "./GetAddressVersionResult";
import { GetBalanceResult } from "./GetBalanceResult";
import { GetBytecodeResult } from "./GetBytecodeResult";
import { GetCallCoinsResult } from "./GetCallCoinsResult";
import { GetCallStackResult } from "./GetCallStackResult";
import { GetCurrentSlotResult } from "./GetCurrentSlotResult";
import { GetDataResult } from "./GetDataResult";
import { GetKeysResult } from "./GetKeysResult";
import { GetNativeTimeResult } from "./GetNativeTimeResult";
import { GetOpDataResult } from "./GetOpDataResult";
import { GetOpKeysResult } from "./GetOpKeysResult";
import { GetOwnedAddressesResult } from "./GetOwnedAddressesResult";
import { GetOriginOperationIdResult } from "./GetOriginOperationIdResult";
import { GetPubKeyVersionResult } from "./GetPubKeyVersionResult";
import { GetRemainingGasResult } from "./GetRemainingGasResult";
import { GetSignatureVersionResult } from "./GetSignatureVersionResult";
import { HashSha256Result } from "./HashSha256Result";
import { HasDataResult } from "./HasDataResult";
import { HasOpKeyResult } from "./HasOpKeyResult";
import { Keccak256Result } from "./Keccak256Result";
import { LocalExecutionResponse } from "./LocalExecutionResponse";
import { MulNativeAmountResult } from "./MulNativeAmountResult";
import { NativeAmountFromStringResult } from "./NativeAmountFromStringResult";
import { NativeAmountToStringResult } from "./NativeAmountToStringResult";
import { ScalarDivRemNativeAmountResult } from "./ScalarDivRemNativeAmountResult";
import { SeedResult } from "./SeedResult";
import { SetBytecodeResult } from "./SetBytecodeResult";
import { SetDataResult } from "./SetDataResult";
import { SubNativeAmountsResult } from "./SubNativeAmountsResult";
import { TransferCoinsResult } from "./TransferCoinsResult";
import { UnsafeRandomResult } from "./UnsafeRandomResult";
import { VerifyBlsMultiSigResult } from "./VerifyBlsMultiSigResult";
import { VerifyBlsSingleSigResult } from "./VerifyBlsSingleSigResult";
import { VerifyEvmSigResult } from "./VerifyEvmSigResult";
import { VerifySigResult } from "./VerifySigResult";
import { SendAsyncMessageResult } from "./SendAsyncMessageResult";

export class RespResult {
  static encode(message: RespResult, writer: Writer): void {
    const addNativeAmountsResult = message.addNativeAmountsResult;
    if (addNativeAmountsResult !== null) {
      writer.uint32(10);
      writer.fork();
      AddNativeAmountsResult.encode(addNativeAmountsResult, writer);
      writer.ldelim();
    }

    const addressFromPubKeyResult = message.addressFromPubKeyResult;
    if (addressFromPubKeyResult !== null) {
      writer.uint32(18);
      writer.fork();
      AddressFromPubKeyResult.encode(addressFromPubKeyResult, writer);
      writer.ldelim();
    }

    const appendDataResult = message.appendDataResult;
    if (appendDataResult !== null) {
      writer.uint32(26);
      writer.fork();
      AppendDataResult.encode(appendDataResult, writer);
      writer.ldelim();
    }

    const base58CheckToBytesResult = message.base58CheckToBytesResult;
    if (base58CheckToBytesResult !== null) {
      writer.uint32(34);
      writer.fork();
      Base58CheckToBytesResult.encode(base58CheckToBytesResult, writer);
      writer.ldelim();
    }

    const blake3HashResult = message.blake3HashResult;
    if (blake3HashResult !== null) {
      writer.uint32(42);
      writer.fork();
      Blake3HashResult.encode(blake3HashResult, writer);
      writer.ldelim();
    }

    const bytesToBase58CheckResult = message.bytesToBase58CheckResult;
    if (bytesToBase58CheckResult !== null) {
      writer.uint32(50);
      writer.fork();
      BytesToBase58CheckResult.encode(bytesToBase58CheckResult, writer);
      writer.ldelim();
    }

    const callerHasWriteAccessResult = message.callerHasWriteAccessResult;
    if (callerHasWriteAccessResult !== null) {
      writer.uint32(58);
      writer.fork();
      CallerHasWriteAccessResult.encode(callerHasWriteAccessResult, writer);
      writer.ldelim();
    }

    const checkAddressResult = message.checkAddressResult;
    if (checkAddressResult !== null) {
      writer.uint32(66);
      writer.fork();
      CheckAddressResult.encode(checkAddressResult, writer);
      writer.ldelim();
    }

    const checkNativeAmountResult = message.checkNativeAmountResult;
    if (checkNativeAmountResult !== null) {
      writer.uint32(74);
      writer.fork();
      CheckNativeAmountResult.encode(checkNativeAmountResult, writer);
      writer.ldelim();
    }

    const checkPubKeyResult = message.checkPubKeyResult;
    if (checkPubKeyResult !== null) {
      writer.uint32(82);
      writer.fork();
      CheckPubKeyResult.encode(checkPubKeyResult, writer);
      writer.ldelim();
    }

    const checkSigResult = message.checkSigResult;
    if (checkSigResult !== null) {
      writer.uint32(90);
      writer.fork();
      CheckSigResult.encode(checkSigResult, writer);
      writer.ldelim();
    }

    const checkedAddNativeTimeResult = message.checkedAddNativeTimeResult;
    if (checkedAddNativeTimeResult !== null) {
      writer.uint32(98);
      writer.fork();
      CheckedAddNativeTimeResult.encode(checkedAddNativeTimeResult, writer);
      writer.ldelim();
    }

    const checkedDivRemNativeTimeResult = message.checkedDivRemNativeTimeResult;
    if (checkedDivRemNativeTimeResult !== null) {
      writer.uint32(106);
      writer.fork();
      CheckedDivRemNativeTimeResult.encode(
        checkedDivRemNativeTimeResult,
        writer
      );
      writer.ldelim();
    }

    const checkedMulNativeTimeResult = message.checkedMulNativeTimeResult;
    if (checkedMulNativeTimeResult !== null) {
      writer.uint32(114);
      writer.fork();
      CheckedMulNativeTimeResult.encode(checkedMulNativeTimeResult, writer);
      writer.ldelim();
    }

    const checkedScalarDivRemNativeTimeResult =
      message.checkedScalarDivRemNativeTimeResult;
    if (checkedScalarDivRemNativeTimeResult !== null) {
      writer.uint32(122);
      writer.fork();
      CheckedScalarDivRemNativeTimeResult.encode(
        checkedScalarDivRemNativeTimeResult,
        writer
      );
      writer.ldelim();
    }

    const checkedSubNativeTimeResult = message.checkedSubNativeTimeResult;
    if (checkedSubNativeTimeResult !== null) {
      writer.uint32(130);
      writer.fork();
      CheckedSubNativeTimeResult.encode(checkedSubNativeTimeResult, writer);
      writer.ldelim();
    }

    const compareAddressResult = message.compareAddressResult;
    if (compareAddressResult !== null) {
      writer.uint32(138);
      writer.fork();
      CompareAddressResult.encode(compareAddressResult, writer);
      writer.ldelim();
    }

    const compareNativeAmountResult = message.compareNativeAmountResult;
    if (compareNativeAmountResult !== null) {
      writer.uint32(146);
      writer.fork();
      CompareNativeAmountResult.encode(compareNativeAmountResult, writer);
      writer.ldelim();
    }

    const compareNativeTimeResult = message.compareNativeTimeResult;
    if (compareNativeTimeResult !== null) {
      writer.uint32(154);
      writer.fork();
      CompareNativeTimeResult.encode(compareNativeTimeResult, writer);
      writer.ldelim();
    }

    const comparePubKeyResult = message.comparePubKeyResult;
    if (comparePubKeyResult !== null) {
      writer.uint32(162);
      writer.fork();
      ComparePubKeyResult.encode(comparePubKeyResult, writer);
      writer.ldelim();
    }

    const createScResult = message.createScResult;
    if (createScResult !== null) {
      writer.uint32(170);
      writer.fork();
      CreateScResult.encode(createScResult, writer);
      writer.ldelim();
    }

    const dateNowResult = message.dateNowResult;
    if (dateNowResult !== null) {
      writer.uint32(178);
      writer.fork();
      DateNowResult.encode(dateNowResult, writer);
      writer.ldelim();
    }

    const deleteDataResult = message.deleteDataResult;
    if (deleteDataResult !== null) {
      writer.uint32(186);
      writer.fork();
      DeleteDataResult.encode(deleteDataResult, writer);
      writer.ldelim();
    }

    const divRemNativeAmountsResult = message.divRemNativeAmountsResult;
    if (divRemNativeAmountsResult !== null) {
      writer.uint32(194);
      writer.fork();
      DivRemNativeAmountsResult.encode(divRemNativeAmountsResult, writer);
      writer.ldelim();
    }

    const functionExistsResult = message.functionExistsResult;
    if (functionExistsResult !== null) {
      writer.uint32(202);
      writer.fork();
      FunctionExistsResult.encode(functionExistsResult, writer);
      writer.ldelim();
    }

    const generateEventResult = message.generateEventResult;
    if (generateEventResult !== null) {
      writer.uint32(210);
      writer.fork();
      GenerateEventResult.encode(generateEventResult, writer);
      writer.ldelim();
    }

    const getAddressCategoryResult = message.getAddressCategoryResult;
    if (getAddressCategoryResult !== null) {
      writer.uint32(218);
      writer.fork();
      GetAddressCategoryResult.encode(getAddressCategoryResult, writer);
      writer.ldelim();
    }

    const getAddressVersionResult = message.getAddressVersionResult;
    if (getAddressVersionResult !== null) {
      writer.uint32(226);
      writer.fork();
      GetAddressVersionResult.encode(getAddressVersionResult, writer);
      writer.ldelim();
    }

    const getBalanceResult = message.getBalanceResult;
    if (getBalanceResult !== null) {
      writer.uint32(234);
      writer.fork();
      GetBalanceResult.encode(getBalanceResult, writer);
      writer.ldelim();
    }

    const getBytecodeResult = message.getBytecodeResult;
    if (getBytecodeResult !== null) {
      writer.uint32(242);
      writer.fork();
      GetBytecodeResult.encode(getBytecodeResult, writer);
      writer.ldelim();
    }

    const getCallCoinsResult = message.getCallCoinsResult;
    if (getCallCoinsResult !== null) {
      writer.uint32(250);
      writer.fork();
      GetCallCoinsResult.encode(getCallCoinsResult, writer);
      writer.ldelim();
    }

    const getCallStackResult = message.getCallStackResult;
    if (getCallStackResult !== null) {
      writer.uint32(258);
      writer.fork();
      GetCallStackResult.encode(getCallStackResult, writer);
      writer.ldelim();
    }

    const getCurrentSlotResult = message.getCurrentSlotResult;
    if (getCurrentSlotResult !== null) {
      writer.uint32(266);
      writer.fork();
      GetCurrentSlotResult.encode(getCurrentSlotResult, writer);
      writer.ldelim();
    }

    const getDataResult = message.getDataResult;
    if (getDataResult !== null) {
      writer.uint32(274);
      writer.fork();
      GetDataResult.encode(getDataResult, writer);
      writer.ldelim();
    }

    const getKeysResult = message.getKeysResult;
    if (getKeysResult !== null) {
      writer.uint32(282);
      writer.fork();
      GetKeysResult.encode(getKeysResult, writer);
      writer.ldelim();
    }

    const getNativeTimeResult = message.getNativeTimeResult;
    if (getNativeTimeResult !== null) {
      writer.uint32(290);
      writer.fork();
      GetNativeTimeResult.encode(getNativeTimeResult, writer);
      writer.ldelim();
    }

    const getOpDataResult = message.getOpDataResult;
    if (getOpDataResult !== null) {
      writer.uint32(298);
      writer.fork();
      GetOpDataResult.encode(getOpDataResult, writer);
      writer.ldelim();
    }

    const getOpKeysResult = message.getOpKeysResult;
    if (getOpKeysResult !== null) {
      writer.uint32(306);
      writer.fork();
      GetOpKeysResult.encode(getOpKeysResult, writer);
      writer.ldelim();
    }

    const getOwnedAddressesResult = message.getOwnedAddressesResult;
    if (getOwnedAddressesResult !== null) {
      writer.uint32(314);
      writer.fork();
      GetOwnedAddressesResult.encode(getOwnedAddressesResult, writer);
      writer.ldelim();
    }

    const getOriginOperationIdResult = message.getOriginOperationIdResult;
    if (getOriginOperationIdResult !== null) {
      writer.uint32(322);
      writer.fork();
      GetOriginOperationIdResult.encode(getOriginOperationIdResult, writer);
      writer.ldelim();
    }

    const getPubKeyVersionResult = message.getPubKeyVersionResult;
    if (getPubKeyVersionResult !== null) {
      writer.uint32(330);
      writer.fork();
      GetPubKeyVersionResult.encode(getPubKeyVersionResult, writer);
      writer.ldelim();
    }

    const getRemainingGasResult = message.getRemainingGasResult;
    if (getRemainingGasResult !== null) {
      writer.uint32(338);
      writer.fork();
      GetRemainingGasResult.encode(getRemainingGasResult, writer);
      writer.ldelim();
    }

    const getSignatureVersionResult = message.getSignatureVersionResult;
    if (getSignatureVersionResult !== null) {
      writer.uint32(346);
      writer.fork();
      GetSignatureVersionResult.encode(getSignatureVersionResult, writer);
      writer.ldelim();
    }

    const hashSha256Result = message.hashSha256Result;
    if (hashSha256Result !== null) {
      writer.uint32(354);
      writer.fork();
      HashSha256Result.encode(hashSha256Result, writer);
      writer.ldelim();
    }

    const hasDataResult = message.hasDataResult;
    if (hasDataResult !== null) {
      writer.uint32(362);
      writer.fork();
      HasDataResult.encode(hasDataResult, writer);
      writer.ldelim();
    }

    const hasOpKeyResult = message.hasOpKeyResult;
    if (hasOpKeyResult !== null) {
      writer.uint32(370);
      writer.fork();
      HasOpKeyResult.encode(hasOpKeyResult, writer);
      writer.ldelim();
    }

    const keccak256Result = message.keccak256Result;
    if (keccak256Result !== null) {
      writer.uint32(378);
      writer.fork();
      Keccak256Result.encode(keccak256Result, writer);
      writer.ldelim();
    }

    const localExecutionResponse = message.localExecutionResponse;
    if (localExecutionResponse !== null) {
      writer.uint32(386);
      writer.fork();
      LocalExecutionResponse.encode(localExecutionResponse, writer);
      writer.ldelim();
    }

    const mulNativeAmountResult = message.mulNativeAmountResult;
    if (mulNativeAmountResult !== null) {
      writer.uint32(394);
      writer.fork();
      MulNativeAmountResult.encode(mulNativeAmountResult, writer);
      writer.ldelim();
    }

    const nativeAmountFromStringResult = message.nativeAmountFromStringResult;
    if (nativeAmountFromStringResult !== null) {
      writer.uint32(402);
      writer.fork();
      NativeAmountFromStringResult.encode(nativeAmountFromStringResult, writer);
      writer.ldelim();
    }

    const nativeAmountToStringResult = message.nativeAmountToStringResult;
    if (nativeAmountToStringResult !== null) {
      writer.uint32(410);
      writer.fork();
      NativeAmountToStringResult.encode(nativeAmountToStringResult, writer);
      writer.ldelim();
    }

    const scalarDivRemNativeAmountResult =
      message.scalarDivRemNativeAmountResult;
    if (scalarDivRemNativeAmountResult !== null) {
      writer.uint32(418);
      writer.fork();
      ScalarDivRemNativeAmountResult.encode(
        scalarDivRemNativeAmountResult,
        writer
      );
      writer.ldelim();
    }

    const seedResult = message.seedResult;
    if (seedResult !== null) {
      writer.uint32(426);
      writer.fork();
      SeedResult.encode(seedResult, writer);
      writer.ldelim();
    }

    const setBytecodeResult = message.setBytecodeResult;
    if (setBytecodeResult !== null) {
      writer.uint32(434);
      writer.fork();
      SetBytecodeResult.encode(setBytecodeResult, writer);
      writer.ldelim();
    }

    const setDataResult = message.setDataResult;
    if (setDataResult !== null) {
      writer.uint32(442);
      writer.fork();
      SetDataResult.encode(setDataResult, writer);
      writer.ldelim();
    }

    const subNativeAmountsResult = message.subNativeAmountsResult;
    if (subNativeAmountsResult !== null) {
      writer.uint32(450);
      writer.fork();
      SubNativeAmountsResult.encode(subNativeAmountsResult, writer);
      writer.ldelim();
    }

    const transferCoinsResult = message.transferCoinsResult;
    if (transferCoinsResult !== null) {
      writer.uint32(458);
      writer.fork();
      TransferCoinsResult.encode(transferCoinsResult, writer);
      writer.ldelim();
    }

    const unsafeRandomResult = message.unsafeRandomResult;
    if (unsafeRandomResult !== null) {
      writer.uint32(466);
      writer.fork();
      UnsafeRandomResult.encode(unsafeRandomResult, writer);
      writer.ldelim();
    }

    const verifyBlsMultiSigResult = message.verifyBlsMultiSigResult;
    if (verifyBlsMultiSigResult !== null) {
      writer.uint32(474);
      writer.fork();
      VerifyBlsMultiSigResult.encode(verifyBlsMultiSigResult, writer);
      writer.ldelim();
    }

    const verifyBlsSingleSigResult = message.verifyBlsSingleSigResult;
    if (verifyBlsSingleSigResult !== null) {
      writer.uint32(482);
      writer.fork();
      VerifyBlsSingleSigResult.encode(verifyBlsSingleSigResult, writer);
      writer.ldelim();
    }

    const verifyEvmSigResult = message.verifyEvmSigResult;
    if (verifyEvmSigResult !== null) {
      writer.uint32(490);
      writer.fork();
      VerifyEvmSigResult.encode(verifyEvmSigResult, writer);
      writer.ldelim();
    }

    const verifySigResult = message.verifySigResult;
    if (verifySigResult !== null) {
      writer.uint32(498);
      writer.fork();
      VerifySigResult.encode(verifySigResult, writer);
      writer.ldelim();
    }

    const sendAsyncMessageResult = message.sendAsyncMessageResult;
    if (sendAsyncMessageResult !== null) {
      writer.uint32(506);
      writer.fork();
      SendAsyncMessageResult.encode(sendAsyncMessageResult, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): RespResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new RespResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.addNativeAmountsResult = AddNativeAmountsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.addressFromPubKeyResult = AddressFromPubKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.appendDataResult = AppendDataResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.base58CheckToBytesResult = Base58CheckToBytesResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.blake3HashResult = Blake3HashResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 6:
          message.bytesToBase58CheckResult = BytesToBase58CheckResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 7:
          message.callerHasWriteAccessResult =
            CallerHasWriteAccessResult.decode(reader, reader.uint32());
          break;

        case 8:
          message.checkAddressResult = CheckAddressResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 9:
          message.checkNativeAmountResult = CheckNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 10:
          message.checkPubKeyResult = CheckPubKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 11:
          message.checkSigResult = CheckSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 12:
          message.checkedAddNativeTimeResult =
            CheckedAddNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 13:
          message.checkedDivRemNativeTimeResult =
            CheckedDivRemNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 14:
          message.checkedMulNativeTimeResult =
            CheckedMulNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 15:
          message.checkedScalarDivRemNativeTimeResult =
            CheckedScalarDivRemNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 16:
          message.checkedSubNativeTimeResult =
            CheckedSubNativeTimeResult.decode(reader, reader.uint32());
          break;

        case 17:
          message.compareAddressResult = CompareAddressResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 18:
          message.compareNativeAmountResult = CompareNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 19:
          message.compareNativeTimeResult = CompareNativeTimeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 20:
          message.comparePubKeyResult = ComparePubKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 21:
          message.createScResult = CreateScResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 22:
          message.dateNowResult = DateNowResult.decode(reader, reader.uint32());
          break;

        case 23:
          message.deleteDataResult = DeleteDataResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 24:
          message.divRemNativeAmountsResult = DivRemNativeAmountsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 25:
          message.functionExistsResult = FunctionExistsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 26:
          message.generateEventResult = GenerateEventResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 27:
          message.getAddressCategoryResult = GetAddressCategoryResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 28:
          message.getAddressVersionResult = GetAddressVersionResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 29:
          message.getBalanceResult = GetBalanceResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 30:
          message.getBytecodeResult = GetBytecodeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 31:
          message.getCallCoinsResult = GetCallCoinsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 32:
          message.getCallStackResult = GetCallStackResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 33:
          message.getCurrentSlotResult = GetCurrentSlotResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 34:
          message.getDataResult = GetDataResult.decode(reader, reader.uint32());
          break;

        case 35:
          message.getKeysResult = GetKeysResult.decode(reader, reader.uint32());
          break;

        case 36:
          message.getNativeTimeResult = GetNativeTimeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 37:
          message.getOpDataResult = GetOpDataResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 38:
          message.getOpKeysResult = GetOpKeysResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 39:
          message.getOwnedAddressesResult = GetOwnedAddressesResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 40:
          message.getOriginOperationIdResult =
            GetOriginOperationIdResult.decode(reader, reader.uint32());
          break;

        case 41:
          message.getPubKeyVersionResult = GetPubKeyVersionResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 42:
          message.getRemainingGasResult = GetRemainingGasResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 43:
          message.getSignatureVersionResult = GetSignatureVersionResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 44:
          message.hashSha256Result = HashSha256Result.decode(
            reader,
            reader.uint32()
          );
          break;

        case 45:
          message.hasDataResult = HasDataResult.decode(reader, reader.uint32());
          break;

        case 46:
          message.hasOpKeyResult = HasOpKeyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 47:
          message.keccak256Result = Keccak256Result.decode(
            reader,
            reader.uint32()
          );
          break;

        case 48:
          message.localExecutionResponse = LocalExecutionResponse.decode(
            reader,
            reader.uint32()
          );
          break;

        case 49:
          message.mulNativeAmountResult = MulNativeAmountResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 50:
          message.nativeAmountFromStringResult =
            NativeAmountFromStringResult.decode(reader, reader.uint32());
          break;

        case 51:
          message.nativeAmountToStringResult =
            NativeAmountToStringResult.decode(reader, reader.uint32());
          break;

        case 52:
          message.scalarDivRemNativeAmountResult =
            ScalarDivRemNativeAmountResult.decode(reader, reader.uint32());
          break;

        case 53:
          message.seedResult = SeedResult.decode(reader, reader.uint32());
          break;

        case 54:
          message.setBytecodeResult = SetBytecodeResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 55:
          message.setDataResult = SetDataResult.decode(reader, reader.uint32());
          break;

        case 56:
          message.subNativeAmountsResult = SubNativeAmountsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 57:
          message.transferCoinsResult = TransferCoinsResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 58:
          message.unsafeRandomResult = UnsafeRandomResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 59:
          message.verifyBlsMultiSigResult = VerifyBlsMultiSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 60:
          message.verifyBlsSingleSigResult = VerifyBlsSingleSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 61:
          message.verifyEvmSigResult = VerifyEvmSigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 62:
          message.verifySigResult = VerifySigResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 63:
          message.sendAsyncMessageResult = SendAsyncMessageResult.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  addNativeAmountsResult: AddNativeAmountsResult | null;
  addressFromPubKeyResult: AddressFromPubKeyResult | null;
  appendDataResult: AppendDataResult | null;
  base58CheckToBytesResult: Base58CheckToBytesResult | null;
  blake3HashResult: Blake3HashResult | null;
  bytesToBase58CheckResult: BytesToBase58CheckResult | null;
  callerHasWriteAccessResult: CallerHasWriteAccessResult | null;
  checkAddressResult: CheckAddressResult | null;
  checkNativeAmountResult: CheckNativeAmountResult | null;
  checkPubKeyResult: CheckPubKeyResult | null;
  checkSigResult: CheckSigResult | null;
  checkedAddNativeTimeResult: CheckedAddNativeTimeResult | null;
  checkedDivRemNativeTimeResult: CheckedDivRemNativeTimeResult | null;
  checkedMulNativeTimeResult: CheckedMulNativeTimeResult | null;
  checkedScalarDivRemNativeTimeResult: CheckedScalarDivRemNativeTimeResult | null;
  checkedSubNativeTimeResult: CheckedSubNativeTimeResult | null;
  compareAddressResult: CompareAddressResult | null;
  compareNativeAmountResult: CompareNativeAmountResult | null;
  compareNativeTimeResult: CompareNativeTimeResult | null;
  comparePubKeyResult: ComparePubKeyResult | null;
  createScResult: CreateScResult | null;
  dateNowResult: DateNowResult | null;
  deleteDataResult: DeleteDataResult | null;
  divRemNativeAmountsResult: DivRemNativeAmountsResult | null;
  functionExistsResult: FunctionExistsResult | null;
  generateEventResult: GenerateEventResult | null;
  getAddressCategoryResult: GetAddressCategoryResult | null;
  getAddressVersionResult: GetAddressVersionResult | null;
  getBalanceResult: GetBalanceResult | null;
  getBytecodeResult: GetBytecodeResult | null;
  getCallCoinsResult: GetCallCoinsResult | null;
  getCallStackResult: GetCallStackResult | null;
  getCurrentSlotResult: GetCurrentSlotResult | null;
  getDataResult: GetDataResult | null;
  getKeysResult: GetKeysResult | null;
  getNativeTimeResult: GetNativeTimeResult | null;
  getOpDataResult: GetOpDataResult | null;
  getOpKeysResult: GetOpKeysResult | null;
  getOwnedAddressesResult: GetOwnedAddressesResult | null;
  getOriginOperationIdResult: GetOriginOperationIdResult | null;
  getPubKeyVersionResult: GetPubKeyVersionResult | null;
  getRemainingGasResult: GetRemainingGasResult | null;
  getSignatureVersionResult: GetSignatureVersionResult | null;
  hashSha256Result: HashSha256Result | null;
  hasDataResult: HasDataResult | null;
  hasOpKeyResult: HasOpKeyResult | null;
  keccak256Result: Keccak256Result | null;
  localExecutionResponse: LocalExecutionResponse | null;
  mulNativeAmountResult: MulNativeAmountResult | null;
  nativeAmountFromStringResult: NativeAmountFromStringResult | null;
  nativeAmountToStringResult: NativeAmountToStringResult | null;
  scalarDivRemNativeAmountResult: ScalarDivRemNativeAmountResult | null;
  seedResult: SeedResult | null;
  setBytecodeResult: SetBytecodeResult | null;
  setDataResult: SetDataResult | null;
  subNativeAmountsResult: SubNativeAmountsResult | null;
  transferCoinsResult: TransferCoinsResult | null;
  unsafeRandomResult: UnsafeRandomResult | null;
  verifyBlsMultiSigResult: VerifyBlsMultiSigResult | null;
  verifyBlsSingleSigResult: VerifyBlsSingleSigResult | null;
  verifyEvmSigResult: VerifyEvmSigResult | null;
  verifySigResult: VerifySigResult | null;
  sendAsyncMessageResult: SendAsyncMessageResult | null;

  constructor(
    addNativeAmountsResult: AddNativeAmountsResult | null = null,
    addressFromPubKeyResult: AddressFromPubKeyResult | null = null,
    appendDataResult: AppendDataResult | null = null,
    base58CheckToBytesResult: Base58CheckToBytesResult | null = null,
    blake3HashResult: Blake3HashResult | null = null,
    bytesToBase58CheckResult: BytesToBase58CheckResult | null = null,
    callerHasWriteAccessResult: CallerHasWriteAccessResult | null = null,
    checkAddressResult: CheckAddressResult | null = null,
    checkNativeAmountResult: CheckNativeAmountResult | null = null,
    checkPubKeyResult: CheckPubKeyResult | null = null,
    checkSigResult: CheckSigResult | null = null,
    checkedAddNativeTimeResult: CheckedAddNativeTimeResult | null = null,
    checkedDivRemNativeTimeResult: CheckedDivRemNativeTimeResult | null = null,
    checkedMulNativeTimeResult: CheckedMulNativeTimeResult | null = null,
    checkedScalarDivRemNativeTimeResult: CheckedScalarDivRemNativeTimeResult | null = null,
    checkedSubNativeTimeResult: CheckedSubNativeTimeResult | null = null,
    compareAddressResult: CompareAddressResult | null = null,
    compareNativeAmountResult: CompareNativeAmountResult | null = null,
    compareNativeTimeResult: CompareNativeTimeResult | null = null,
    comparePubKeyResult: ComparePubKeyResult | null = null,
    createScResult: CreateScResult | null = null,
    dateNowResult: DateNowResult | null = null,
    deleteDataResult: DeleteDataResult | null = null,
    divRemNativeAmountsResult: DivRemNativeAmountsResult | null = null,
    functionExistsResult: FunctionExistsResult | null = null,
    generateEventResult: GenerateEventResult | null = null,
    getAddressCategoryResult: GetAddressCategoryResult | null = null,
    getAddressVersionResult: GetAddressVersionResult | null = null,
    getBalanceResult: GetBalanceResult | null = null,
    getBytecodeResult: GetBytecodeResult | null = null,
    getCallCoinsResult: GetCallCoinsResult | null = null,
    getCallStackResult: GetCallStackResult | null = null,
    getCurrentSlotResult: GetCurrentSlotResult | null = null,
    getDataResult: GetDataResult | null = null,
    getKeysResult: GetKeysResult | null = null,
    getNativeTimeResult: GetNativeTimeResult | null = null,
    getOpDataResult: GetOpDataResult | null = null,
    getOpKeysResult: GetOpKeysResult | null = null,
    getOwnedAddressesResult: GetOwnedAddressesResult | null = null,
    getOriginOperationIdResult: GetOriginOperationIdResult | null = null,
    getPubKeyVersionResult: GetPubKeyVersionResult | null = null,
    getRemainingGasResult: GetRemainingGasResult | null = null,
    getSignatureVersionResult: GetSignatureVersionResult | null = null,
    hashSha256Result: HashSha256Result | null = null,
    hasDataResult: HasDataResult | null = null,
    hasOpKeyResult: HasOpKeyResult | null = null,
    keccak256Result: Keccak256Result | null = null,
    localExecutionResponse: LocalExecutionResponse | null = null,
    mulNativeAmountResult: MulNativeAmountResult | null = null,
    nativeAmountFromStringResult: NativeAmountFromStringResult | null = null,
    nativeAmountToStringResult: NativeAmountToStringResult | null = null,
    scalarDivRemNativeAmountResult: ScalarDivRemNativeAmountResult | null = null,
    seedResult: SeedResult | null = null,
    setBytecodeResult: SetBytecodeResult | null = null,
    setDataResult: SetDataResult | null = null,
    subNativeAmountsResult: SubNativeAmountsResult | null = null,
    transferCoinsResult: TransferCoinsResult | null = null,
    unsafeRandomResult: UnsafeRandomResult | null = null,
    verifyBlsMultiSigResult: VerifyBlsMultiSigResult | null = null,
    verifyBlsSingleSigResult: VerifyBlsSingleSigResult | null = null,
    verifyEvmSigResult: VerifyEvmSigResult | null = null,
    verifySigResult: VerifySigResult | null = null,
    sendAsyncMessageResult: SendAsyncMessageResult | null = null
  ) {
    this.addNativeAmountsResult = addNativeAmountsResult;
    this.addressFromPubKeyResult = addressFromPubKeyResult;
    this.appendDataResult = appendDataResult;
    this.base58CheckToBytesResult = base58CheckToBytesResult;
    this.blake3HashResult = blake3HashResult;
    this.bytesToBase58CheckResult = bytesToBase58CheckResult;
    this.callerHasWriteAccessResult = callerHasWriteAccessResult;
    this.checkAddressResult = checkAddressResult;
    this.checkNativeAmountResult = checkNativeAmountResult;
    this.checkPubKeyResult = checkPubKeyResult;
    this.checkSigResult = checkSigResult;
    this.checkedAddNativeTimeResult = checkedAddNativeTimeResult;
    this.checkedDivRemNativeTimeResult = checkedDivRemNativeTimeResult;
    this.checkedMulNativeTimeResult = checkedMulNativeTimeResult;
    this.checkedScalarDivRemNativeTimeResult =
      checkedScalarDivRemNativeTimeResult;
    this.checkedSubNativeTimeResult = checkedSubNativeTimeResult;
    this.compareAddressResult = compareAddressResult;
    this.compareNativeAmountResult = compareNativeAmountResult;
    this.compareNativeTimeResult = compareNativeTimeResult;
    this.comparePubKeyResult = comparePubKeyResult;
    this.createScResult = createScResult;
    this.dateNowResult = dateNowResult;
    this.deleteDataResult = deleteDataResult;
    this.divRemNativeAmountsResult = divRemNativeAmountsResult;
    this.functionExistsResult = functionExistsResult;
    this.generateEventResult = generateEventResult;
    this.getAddressCategoryResult = getAddressCategoryResult;
    this.getAddressVersionResult = getAddressVersionResult;
    this.getBalanceResult = getBalanceResult;
    this.getBytecodeResult = getBytecodeResult;
    this.getCallCoinsResult = getCallCoinsResult;
    this.getCallStackResult = getCallStackResult;
    this.getCurrentSlotResult = getCurrentSlotResult;
    this.getDataResult = getDataResult;
    this.getKeysResult = getKeysResult;
    this.getNativeTimeResult = getNativeTimeResult;
    this.getOpDataResult = getOpDataResult;
    this.getOpKeysResult = getOpKeysResult;
    this.getOwnedAddressesResult = getOwnedAddressesResult;
    this.getOriginOperationIdResult = getOriginOperationIdResult;
    this.getPubKeyVersionResult = getPubKeyVersionResult;
    this.getRemainingGasResult = getRemainingGasResult;
    this.getSignatureVersionResult = getSignatureVersionResult;
    this.hashSha256Result = hashSha256Result;
    this.hasDataResult = hasDataResult;
    this.hasOpKeyResult = hasOpKeyResult;
    this.keccak256Result = keccak256Result;
    this.localExecutionResponse = localExecutionResponse;
    this.mulNativeAmountResult = mulNativeAmountResult;
    this.nativeAmountFromStringResult = nativeAmountFromStringResult;
    this.nativeAmountToStringResult = nativeAmountToStringResult;
    this.scalarDivRemNativeAmountResult = scalarDivRemNativeAmountResult;
    this.seedResult = seedResult;
    this.setBytecodeResult = setBytecodeResult;
    this.setDataResult = setDataResult;
    this.subNativeAmountsResult = subNativeAmountsResult;
    this.transferCoinsResult = transferCoinsResult;
    this.unsafeRandomResult = unsafeRandomResult;
    this.verifyBlsMultiSigResult = verifyBlsMultiSigResult;
    this.verifyBlsSingleSigResult = verifyBlsSingleSigResult;
    this.verifyEvmSigResult = verifyEvmSigResult;
    this.verifySigResult = verifySigResult;
    this.sendAsyncMessageResult = sendAsyncMessageResult;
  }
}

export function encodeRespResult(message: RespResult): Uint8Array {
  return Protobuf.encode(message, RespResult.encode);
}

export function decodeRespResult(buffer: Uint8Array): RespResult {
  return Protobuf.decode<RespResult>(buffer, RespResult.decode);
}
