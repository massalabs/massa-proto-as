// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.22.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class GetCurrentThreadResult {
  static encode(message: GetCurrentThreadResult, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.thread);
  }

  static decode(reader: Reader, length: i32): GetCurrentThreadResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new GetCurrentThreadResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.thread = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  thread: i32;

  constructor(thread: i32 = 0) {
    this.thread = thread;
  }
}

export function encodeGetCurrentThreadResult(
  message: GetCurrentThreadResult
): Uint8Array {
  return Protobuf.encode(message, GetCurrentThreadResult.encode);
}

export function decodeGetCurrentThreadResult(
  buffer: Uint8Array
): GetCurrentThreadResult {
  return Protobuf.decode<GetCurrentThreadResult>(
    buffer,
    GetCurrentThreadResult.decode
  );
}
