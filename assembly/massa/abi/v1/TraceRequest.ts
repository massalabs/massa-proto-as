// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.22.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class TraceRequest {
  static encode(message: TraceRequest, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.message);

    writer.uint32(16);
    writer.int32(message.n);

    writer.uint32(25);
    writer.double(message.a0);

    writer.uint32(33);
    writer.double(message.a1);

    writer.uint32(41);
    writer.double(message.a2);

    writer.uint32(49);
    writer.double(message.a3);

    writer.uint32(57);
    writer.double(message.a4);
  }

  static decode(reader: Reader, length: i32): TraceRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TraceRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.message = reader.string();
          break;

        case 2:
          message.n = reader.int32();
          break;

        case 3:
          message.a0 = reader.double();
          break;

        case 4:
          message.a1 = reader.double();
          break;

        case 5:
          message.a2 = reader.double();
          break;

        case 6:
          message.a3 = reader.double();
          break;

        case 7:
          message.a4 = reader.double();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  message: string;
  n: i32;
  a0: f64;
  a1: f64;
  a2: f64;
  a3: f64;
  a4: f64;

  constructor(
    message: string = "",
    n: i32 = 0,
    a0: f64 = 0.0,
    a1: f64 = 0.0,
    a2: f64 = 0.0,
    a3: f64 = 0.0,
    a4: f64 = 0.0
  ) {
    this.message = message;
    this.n = n;
    this.a0 = a0;
    this.a1 = a1;
    this.a2 = a2;
    this.a3 = a3;
    this.a4 = a4;
  }
}

export function encodeTraceRequest(message: TraceRequest): Uint8Array {
  return Protobuf.encode(message, TraceRequest.encode);
}

export function decodeTraceRequest(buffer: Uint8Array): TraceRequest {
  return Protobuf.decode<TraceRequest>(buffer, TraceRequest.decode);
}
