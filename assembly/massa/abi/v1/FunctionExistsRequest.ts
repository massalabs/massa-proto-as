// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Address } from "./Address";

export class FunctionExistsRequest {
  static encode(message: FunctionExistsRequest, writer: Writer): void {
    const address = message.address;
    if (address !== null) {
      writer.uint32(10);
      writer.fork();
      Address.encode(address, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.function);
  }

  static decode(reader: Reader, length: i32): FunctionExistsRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FunctionExistsRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = Address.decode(reader, reader.uint32());
          break;

        case 2:
          message.function = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: Address | null;
  function: string;

  constructor(address: Address | null = null, function_: string = "") {
    this.address = address;
    this.function = function_;
  }
}

export function encodeFunctionExistsRequest(
  message: FunctionExistsRequest
): Uint8Array {
  return Protobuf.encode(message, FunctionExistsRequest.encode);
}

export function decodeFunctionExistsRequest(
  buffer: Uint8Array
): FunctionExistsRequest {
  return Protobuf.decode<FunctionExistsRequest>(
    buffer,
    FunctionExistsRequest.decode
  );
}
