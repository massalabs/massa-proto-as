// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Address } from "./Address";
import { Amount } from "./Amount";

export class CallRequest {
  static encode(message: CallRequest, writer: Writer): void {
    const address = message.address;
    if (address !== null) {
      writer.uint32(10);
      writer.fork();
      Address.encode(address, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.function);

    writer.uint32(26);
    writer.bytes(message.arg);

    const callCoins = message.callCoins;
    if (callCoins !== null) {
      writer.uint32(34);
      writer.fork();
      Amount.encode(callCoins, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): CallRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new CallRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = Address.decode(reader, reader.uint32());
          break;

        case 2:
          message.function = reader.string();
          break;

        case 3:
          message.arg = reader.bytes();
          break;

        case 4:
          message.callCoins = Amount.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: Address | null;
  function: string;
  arg: Uint8Array;
  callCoins: Amount | null;

  constructor(
    address: Address | null = null,
    function_: string = "",
    arg: Uint8Array = new Uint8Array(0),
    callCoins: Amount | null = null
  ) {
    this.address = address;
    this.function = function_;
    this.arg = arg;
    this.callCoins = callCoins;
  }
}

export function encodeCallRequest(message: CallRequest): Uint8Array {
  return Protobuf.encode(message, CallRequest.encode);
}

export function decodeCallRequest(buffer: Uint8Array): CallRequest {
  return Protobuf.decode<CallRequest>(buffer, CallRequest.decode);
}
