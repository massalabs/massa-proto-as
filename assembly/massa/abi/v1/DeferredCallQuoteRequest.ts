// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Slot } from "../../model/v1/Slot";

export class DeferredCallQuoteRequest {
  static encode(message: DeferredCallQuoteRequest, writer: Writer): void {
    const targetSlot = message.targetSlot;
    if (targetSlot !== null) {
      writer.uint32(10);
      writer.fork();
      Slot.encode(targetSlot, writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.uint64(message.maxGas);

    writer.uint32(24);
    writer.uint64(message.paramsSize);
  }

  static decode(reader: Reader, length: i32): DeferredCallQuoteRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DeferredCallQuoteRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.targetSlot = Slot.decode(reader, reader.uint32());
          break;

        case 2:
          message.maxGas = reader.uint64();
          break;

        case 3:
          message.paramsSize = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  targetSlot: Slot | null;
  maxGas: u64;
  paramsSize: u64;

  constructor(
    targetSlot: Slot | null = null,
    maxGas: u64 = 0,
    paramsSize: u64 = 0
  ) {
    this.targetSlot = targetSlot;
    this.maxGas = maxGas;
    this.paramsSize = paramsSize;
  }
}

export function encodeDeferredCallQuoteRequest(
  message: DeferredCallQuoteRequest
): Uint8Array {
  return Protobuf.encode(message, DeferredCallQuoteRequest.encode);
}

export function decodeDeferredCallQuoteRequest(
  buffer: Uint8Array
): DeferredCallQuoteRequest {
  return Protobuf.decode<DeferredCallQuoteRequest>(
    buffer,
    DeferredCallQuoteRequest.decode
  );
}
