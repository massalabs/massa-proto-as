// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { NativeAmount } from "../../model/v1/NativeAmount";
import { UInt64Value } from "../../../google/protobuf/UInt64Value";

export class MulNativeAmountRequest {
  static encode(message: MulNativeAmountRequest, writer: Writer): void {
    const amount = message.amount;
    if (amount !== null) {
      writer.uint32(10);
      writer.fork();
      NativeAmount.encode(amount, writer);
      writer.ldelim();
    }

    const mandatoryCoefficient = message.mandatoryCoefficient;
    if (mandatoryCoefficient !== null) {
      writer.uint32(18);
      writer.fork();
      UInt64Value.encode(mandatoryCoefficient, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MulNativeAmountRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MulNativeAmountRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.amount = NativeAmount.decode(reader, reader.uint32());
          break;

        case 2:
          message.mandatoryCoefficient = UInt64Value.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  amount: NativeAmount | null;
  mandatoryCoefficient: UInt64Value | null;

  constructor(
    amount: NativeAmount | null = null,
    mandatoryCoefficient: UInt64Value | null = null
  ) {
    this.amount = amount;
    this.mandatoryCoefficient = mandatoryCoefficient;
  }
}

export function encodeMulNativeAmountRequest(
  message: MulNativeAmountRequest
): Uint8Array {
  return Protobuf.encode(message, MulNativeAmountRequest.encode);
}

export function decodeMulNativeAmountRequest(
  buffer: Uint8Array
): MulNativeAmountRequest {
  return Protobuf.decode<MulNativeAmountRequest>(
    buffer,
    MulNativeAmountRequest.decode
  );
}
