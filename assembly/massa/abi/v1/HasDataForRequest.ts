// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.22.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { NativeAddress } from "..\\..\\model\\v1\\NativeAddress";

export class HasDataForRequest {
  static encode(message: HasDataForRequest, writer: Writer): void {
    const address = message.address;
    if (address !== null) {
      writer.uint32(10);
      writer.fork();
      NativeAddress.encode(address, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.bytes(message.key);
  }

  static decode(reader: Reader, length: i32): HasDataForRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new HasDataForRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = NativeAddress.decode(reader, reader.uint32());
          break;

        case 2:
          message.key = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: NativeAddress | null;
  key: Uint8Array;

  constructor(
    address: NativeAddress | null = null,
    key: Uint8Array = new Uint8Array(0)
  ) {
    this.address = address;
    this.key = key;
  }
}

export function encodeHasDataForRequest(
  message: HasDataForRequest
): Uint8Array {
  return Protobuf.encode(message, HasDataForRequest.encode);
}

export function decodeHasDataForRequest(buffer: Uint8Array): HasDataForRequest {
  return Protobuf.decode<HasDataForRequest>(buffer, HasDataForRequest.decode);
}
