// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.3

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { NativeAmount } from "../../model/v1/NativeAmount";

export class DivRemNativeAmountsResult {
  static encode(message: DivRemNativeAmountsResult, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.quotient);

    const remainder = message.remainder;
    if (remainder !== null) {
      writer.uint32(18);
      writer.fork();
      NativeAmount.encode(remainder, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): DivRemNativeAmountsResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DivRemNativeAmountsResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.quotient = reader.uint64();
          break;

        case 2:
          message.remainder = NativeAmount.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  quotient: u64;
  remainder: NativeAmount | null;

  constructor(quotient: u64 = 0, remainder: NativeAmount | null = null) {
    this.quotient = quotient;
    this.remainder = remainder;
  }
}

export function encodeDivRemNativeAmountsResult(
  message: DivRemNativeAmountsResult
): Uint8Array {
  return Protobuf.encode(message, DivRemNativeAmountsResult.encode);
}

export function decodeDivRemNativeAmountsResult(
  buffer: Uint8Array
): DivRemNativeAmountsResult {
  return Protobuf.decode<DivRemNativeAmountsResult>(
    buffer,
    DivRemNativeAmountsResult.decode
  );
}
