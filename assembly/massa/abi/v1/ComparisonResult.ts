// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { LeftLower } from "./ComparisonResult/LeftLower";
import { Equal } from "./ComparisonResult/Equal";
import { LeftGreater } from "./ComparisonResult/LeftGreater";

export class ComparisonResult {
  static encode(message: ComparisonResult, writer: Writer): void {
    const leftLower = message.leftLower;
    if (leftLower !== null) {
      writer.uint32(10);
      writer.fork();
      LeftLower.encode(leftLower, writer);
      writer.ldelim();
    }

    const equal = message.equal;
    if (equal !== null) {
      writer.uint32(18);
      writer.fork();
      Equal.encode(equal, writer);
      writer.ldelim();
    }

    const leftGreater = message.leftGreater;
    if (leftGreater !== null) {
      writer.uint32(26);
      writer.fork();
      LeftGreater.encode(leftGreater, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ComparisonResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ComparisonResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.leftLower = LeftLower.decode(reader, reader.uint32());
          break;

        case 2:
          message.equal = Equal.decode(reader, reader.uint32());
          break;

        case 3:
          message.leftGreater = LeftGreater.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  leftLower: LeftLower | null;
  equal: Equal | null;
  leftGreater: LeftGreater | null;

  constructor(
    leftLower: LeftLower | null = null,
    equal: Equal | null = null,
    leftGreater: LeftGreater | null = null
  ) {
    this.leftLower = leftLower;
    this.equal = equal;
    this.leftGreater = leftGreater;
  }
}

export function encodeComparisonResult(message: ComparisonResult): Uint8Array {
  return Protobuf.encode(message, ComparisonResult.encode);
}

export function decodeComparisonResult(buffer: Uint8Array): ComparisonResult {
  return Protobuf.decode<ComparisonResult>(buffer, ComparisonResult.decode);
}
