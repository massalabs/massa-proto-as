// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.3

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { NativeAmount } from "../../model/v1/NativeAmount";

export class SubNativeAmountRequest {
  static encode(message: SubNativeAmountRequest, writer: Writer): void {
    const left = message.left;
    if (left !== null) {
      writer.uint32(10);
      writer.fork();
      NativeAmount.encode(left, writer);
      writer.ldelim();
    }

    const right = message.right;
    if (right !== null) {
      writer.uint32(18);
      writer.fork();
      NativeAmount.encode(right, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SubNativeAmountRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SubNativeAmountRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.left = NativeAmount.decode(reader, reader.uint32());
          break;

        case 2:
          message.right = NativeAmount.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  left: NativeAmount | null;
  right: NativeAmount | null;

  constructor(
    left: NativeAmount | null = null,
    right: NativeAmount | null = null
  ) {
    this.left = left;
    this.right = right;
  }
}

export function encodeSubNativeAmountRequest(
  message: SubNativeAmountRequest
): Uint8Array {
  return Protobuf.encode(message, SubNativeAmountRequest.encode);
}

export function decodeSubNativeAmountRequest(
  buffer: Uint8Array
): SubNativeAmountRequest {
  return Protobuf.decode<SubNativeAmountRequest>(
    buffer,
    SubNativeAmountRequest.decode
  );
}
