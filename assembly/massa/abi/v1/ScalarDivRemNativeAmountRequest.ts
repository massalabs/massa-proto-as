// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { NativeAmount } from "../../model/v1/NativeAmount";
import { UInt64Value } from "../../../google/protobuf/UInt64Value";

export class ScalarDivRemNativeAmountRequest {
  static encode(
    message: ScalarDivRemNativeAmountRequest,
    writer: Writer
  ): void {
    const dividend = message.dividend;
    if (dividend !== null) {
      writer.uint32(10);
      writer.fork();
      NativeAmount.encode(dividend, writer);
      writer.ldelim();
    }

    const mandatoryDivisor = message.mandatoryDivisor;
    if (mandatoryDivisor !== null) {
      writer.uint32(18);
      writer.fork();
      UInt64Value.encode(mandatoryDivisor, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ScalarDivRemNativeAmountRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ScalarDivRemNativeAmountRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.dividend = NativeAmount.decode(reader, reader.uint32());
          break;

        case 2:
          message.mandatoryDivisor = UInt64Value.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  dividend: NativeAmount | null;
  mandatoryDivisor: UInt64Value | null;

  constructor(
    dividend: NativeAmount | null = null,
    mandatoryDivisor: UInt64Value | null = null
  ) {
    this.dividend = dividend;
    this.mandatoryDivisor = mandatoryDivisor;
  }
}

export function encodeScalarDivRemNativeAmountRequest(
  message: ScalarDivRemNativeAmountRequest
): Uint8Array {
  return Protobuf.encode(message, ScalarDivRemNativeAmountRequest.encode);
}

export function decodeScalarDivRemNativeAmountRequest(
  buffer: Uint8Array
): ScalarDivRemNativeAmountRequest {
  return Protobuf.decode<ScalarDivRemNativeAmountRequest>(
    buffer,
    ScalarDivRemNativeAmountRequest.decode
  );
}
