// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Slot } from "./Slot";

export class SlotRange {
  static encode(message: SlotRange, writer: Writer): void {
    const startSlot = message.startSlot;
    if (startSlot !== null) {
      writer.uint32(10);
      writer.fork();
      Slot.encode(startSlot, writer);
      writer.ldelim();
    }

    const endSlot = message.endSlot;
    if (endSlot !== null) {
      writer.uint32(18);
      writer.fork();
      Slot.encode(endSlot, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SlotRange {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SlotRange();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.startSlot = Slot.decode(reader, reader.uint32());
          break;

        case 2:
          message.endSlot = Slot.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  startSlot: Slot | null;
  endSlot: Slot | null;

  constructor(startSlot: Slot | null = null, endSlot: Slot | null = null) {
    this.startSlot = startSlot;
    this.endSlot = endSlot;
  }
}

export function encodeSlotRange(message: SlotRange): Uint8Array {
  return Protobuf.encode(message, SlotRange.encode);
}

export function decodeSlotRange(buffer: Uint8Array): SlotRange {
  return Protobuf.decode<SlotRange>(buffer, SlotRange.decode);
}
