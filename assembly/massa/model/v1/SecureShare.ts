// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.3

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class SecureShare {
  static encode(message: SecureShare, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.serializedData);

    writer.uint32(18);
    writer.string(message.signature);

    writer.uint32(26);
    writer.string(message.contentCreatorPubKey);

    writer.uint32(34);
    writer.string(message.contentCreatorAddress);

    writer.uint32(42);
    writer.string(message.id);
  }

  static decode(reader: Reader, length: i32): SecureShare {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SecureShare();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.serializedData = reader.bytes();
          break;

        case 2:
          message.signature = reader.string();
          break;

        case 3:
          message.contentCreatorPubKey = reader.string();
          break;

        case 4:
          message.contentCreatorAddress = reader.string();
          break;

        case 5:
          message.id = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  serializedData: Uint8Array;
  signature: string;
  contentCreatorPubKey: string;
  contentCreatorAddress: string;
  id: string;

  constructor(
    serializedData: Uint8Array = new Uint8Array(0),
    signature: string = "",
    contentCreatorPubKey: string = "",
    contentCreatorAddress: string = "",
    id: string = ""
  ) {
    this.serializedData = serializedData;
    this.signature = signature;
    this.contentCreatorPubKey = contentCreatorPubKey;
    this.contentCreatorAddress = contentCreatorAddress;
    this.id = id;
  }
}

export function encodeSecureShare(message: SecureShare): Uint8Array {
  return Protobuf.encode(message, SecureShare.encode);
}

export function decodeSecureShare(buffer: Uint8Array): SecureShare {
  return Protobuf.decode<SecureShare>(buffer, SecureShare.decode);
}
