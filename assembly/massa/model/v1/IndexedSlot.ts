// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.3

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Slot } from "./Slot";

export class IndexedSlot {
  static encode(message: IndexedSlot, writer: Writer): void {
    const slot = message.slot;
    if (slot !== null) {
      writer.uint32(10);
      writer.fork();
      Slot.encode(slot, writer);
      writer.ldelim();
    }

    writer.uint32(17);
    writer.fixed64(message.index);
  }

  static decode(reader: Reader, length: i32): IndexedSlot {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new IndexedSlot();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.slot = Slot.decode(reader, reader.uint32());
          break;

        case 2:
          message.index = reader.fixed64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  slot: Slot | null;
  index: i64;

  constructor(slot: Slot | null = null, index: i64 = 0) {
    this.slot = slot;
    this.index = index;
  }
}

export function encodeIndexedSlot(message: IndexedSlot): Uint8Array {
  return Protobuf.encode(message, IndexedSlot.encode);
}

export function decodeIndexedSlot(buffer: Uint8Array): IndexedSlot {
  return Protobuf.decode<IndexedSlot>(buffer, IndexedSlot.decode);
}
