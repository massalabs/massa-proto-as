// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Slot } from "./Slot";

export class Slots {
  static encode(message: Slots, writer: Writer): void {
    const slots = message.slots;
    for (let i: i32 = 0; i < slots.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Slot.encode(slots[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Slots {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Slots();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.slots.push(Slot.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  slots: Array<Slot>;

  constructor(slots: Array<Slot> = []) {
    this.slots = slots;
  }
}

export function encodeSlots(message: Slots): Uint8Array {
  return Protobuf.encode(message, Slots.encode);
}

export function decodeSlots(buffer: Uint8Array): Slots {
  return Protobuf.decode<Slots>(buffer, Slots.decode);
}
